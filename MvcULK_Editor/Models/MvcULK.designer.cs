#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MvcULK_Editor.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="ULKDB")]
	public partial class MvcULKDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertdepartment(department instance);
    partial void Updatedepartment(department instance);
    partial void Deletedepartment(department instance);
    partial void Insertdiscipline(discipline instance);
    partial void Updatediscipline(discipline instance);
    partial void Deletediscipline(discipline instance);
    partial void Insertrazdel(razdel instance);
    partial void Updaterazdel(razdel instance);
    partial void Deleterazdel(razdel instance);
    partial void Inserttopic(topic instance);
    partial void Updatetopic(topic instance);
    partial void Deletetopic(topic instance);
    partial void Insertquestion(question instance);
    partial void Updatequestion(question instance);
    partial void Deletequestion(question instance);
    partial void Insertanswer(answer instance);
    partial void Updateanswer(answer instance);
    partial void Deleteanswer(answer instance);
    #endregion
		
		public MvcULKDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ULKDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MvcULKDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MvcULKDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MvcULKDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MvcULKDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<department> departments
		{
			get
			{
				return this.GetTable<department>();
			}
		}
		
		public System.Data.Linq.Table<discipline> disciplines
		{
			get
			{
				return this.GetTable<discipline>();
			}
		}
		
		public System.Data.Linq.Table<razdel> razdels
		{
			get
			{
				return this.GetTable<razdel>();
			}
		}
		
		public System.Data.Linq.Table<topic> topics
		{
			get
			{
				return this.GetTable<topic>();
			}
		}
		
		public System.Data.Linq.Table<question> questions
		{
			get
			{
				return this.GetTable<question>();
			}
		}
		
		public System.Data.Linq.Table<answer> answers
		{
			get
			{
				return this.GetTable<answer>();
			}
		}
	}
	
	[Table(Name="dbo.departments")]
	public partial class department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _title;
		
		private EntitySet<discipline> _disciplines;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    #endregion
		
		public department()
		{
			this._disciplines = new EntitySet<discipline>(new Action<discipline>(this.attach_disciplines), new Action<discipline>(this.detach_disciplines));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_title", DbType="NChar(255) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[Association(Name="department_discipline", Storage="_disciplines", ThisKey="id", OtherKey="department_id")]
		public EntitySet<discipline> disciplines
		{
			get
			{
				return this._disciplines;
			}
			set
			{
				this._disciplines.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_disciplines(discipline entity)
		{
			this.SendPropertyChanging();
			entity.department = this;
		}
		
		private void detach_disciplines(discipline entity)
		{
			this.SendPropertyChanging();
			entity.department = null;
		}
	}
	
	[Table(Name="dbo.disciplines")]
	public partial class discipline : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _department_id;
		
		private string _title;
		
		private EntitySet<topic> _topics;
		
		private EntityRef<department> _department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Ondepartment_idChanging(long value);
    partial void Ondepartment_idChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    #endregion
		
		public discipline()
		{
			this._topics = new EntitySet<topic>(new Action<topic>(this.attach_topics), new Action<topic>(this.detach_topics));
			this._department = default(EntityRef<department>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_department_id", DbType="BigInt NOT NULL")]
		public long department_id
		{
			get
			{
				return this._department_id;
			}
			set
			{
				if ((this._department_id != value))
				{
					if (this._department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondepartment_idChanging(value);
					this.SendPropertyChanging();
					this._department_id = value;
					this.SendPropertyChanged("department_id");
					this.Ondepartment_idChanged();
				}
			}
		}
		
		[Column(Storage="_title", DbType="NChar(255) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[Association(Name="discipline_topic", Storage="_topics", ThisKey="id", OtherKey="discipline_id")]
		public EntitySet<topic> topics
		{
			get
			{
				return this._topics;
			}
			set
			{
				this._topics.Assign(value);
			}
		}
		
		[Association(Name="department_discipline", Storage="_department", ThisKey="department_id", OtherKey="id", IsForeignKey=true)]
		public department department
		{
			get
			{
				return this._department.Entity;
			}
			set
			{
				department previousValue = this._department.Entity;
				if (((previousValue != value) 
							|| (this._department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._department.Entity = null;
						previousValue.disciplines.Remove(this);
					}
					this._department.Entity = value;
					if ((value != null))
					{
						value.disciplines.Add(this);
						this._department_id = value.id;
					}
					else
					{
						this._department_id = default(long);
					}
					this.SendPropertyChanged("department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_topics(topic entity)
		{
			this.SendPropertyChanging();
			entity.discipline = this;
		}
		
		private void detach_topics(topic entity)
		{
			this.SendPropertyChanging();
			entity.discipline = null;
		}
	}
	
	[Table(Name="dbo.razdels")]
	public partial class razdel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _topic_id;
		
		private string _title;
		
		private int _questions_count;
		
		private EntitySet<question> _questions;
		
		private EntityRef<topic> _topic;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Ontopic_idChanging(long value);
    partial void Ontopic_idChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void Onquestions_countChanging(int value);
    partial void Onquestions_countChanged();
    #endregion
		
		public razdel()
		{
			this._questions = new EntitySet<question>(new Action<question>(this.attach_questions), new Action<question>(this.detach_questions));
			this._topic = default(EntityRef<topic>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_topic_id", DbType="BigInt NOT NULL")]
		public long topic_id
		{
			get
			{
				return this._topic_id;
			}
			set
			{
				if ((this._topic_id != value))
				{
					if (this._topic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontopic_idChanging(value);
					this.SendPropertyChanging();
					this._topic_id = value;
					this.SendPropertyChanged("topic_id");
					this.Ontopic_idChanged();
				}
			}
		}
		
		[Column(Storage="_title", DbType="NChar(255) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[Column(Storage="_questions_count", DbType="Int NOT NULL")]
		public int questions_count
		{
			get
			{
				return this._questions_count;
			}
			set
			{
				if ((this._questions_count != value))
				{
					this.Onquestions_countChanging(value);
					this.SendPropertyChanging();
					this._questions_count = value;
					this.SendPropertyChanged("questions_count");
					this.Onquestions_countChanged();
				}
			}
		}
		
		[Association(Name="razdel_question", Storage="_questions", ThisKey="id", OtherKey="razdel_id")]
		public EntitySet<question> questions
		{
			get
			{
				return this._questions;
			}
			set
			{
				this._questions.Assign(value);
			}
		}
		
		[Association(Name="topic_razdel", Storage="_topic", ThisKey="topic_id", OtherKey="id", IsForeignKey=true)]
		public topic topic
		{
			get
			{
				return this._topic.Entity;
			}
			set
			{
				topic previousValue = this._topic.Entity;
				if (((previousValue != value) 
							|| (this._topic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._topic.Entity = null;
						previousValue.razdels.Remove(this);
					}
					this._topic.Entity = value;
					if ((value != null))
					{
						value.razdels.Add(this);
						this._topic_id = value.id;
					}
					else
					{
						this._topic_id = default(long);
					}
					this.SendPropertyChanged("topic");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_questions(question entity)
		{
			this.SendPropertyChanging();
			entity.razdel = this;
		}
		
		private void detach_questions(question entity)
		{
			this.SendPropertyChanging();
			entity.razdel = null;
		}
	}
	
	[Table(Name="dbo.topics")]
	public partial class topic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _discipline_id;
		
		private string _title;
		
		private EntitySet<razdel> _razdels;
		
		private EntityRef<discipline> _discipline;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Ondiscipline_idChanging(long value);
    partial void Ondiscipline_idChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    #endregion
		
		public topic()
		{
			this._razdels = new EntitySet<razdel>(new Action<razdel>(this.attach_razdels), new Action<razdel>(this.detach_razdels));
			this._discipline = default(EntityRef<discipline>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_discipline_id", DbType="BigInt NOT NULL")]
		public long discipline_id
		{
			get
			{
				return this._discipline_id;
			}
			set
			{
				if ((this._discipline_id != value))
				{
					if (this._discipline.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondiscipline_idChanging(value);
					this.SendPropertyChanging();
					this._discipline_id = value;
					this.SendPropertyChanged("discipline_id");
					this.Ondiscipline_idChanged();
				}
			}
		}
		
		[Column(Storage="_title", DbType="NChar(255) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[Association(Name="topic_razdel", Storage="_razdels", ThisKey="id", OtherKey="topic_id")]
		public EntitySet<razdel> razdels
		{
			get
			{
				return this._razdels;
			}
			set
			{
				this._razdels.Assign(value);
			}
		}
		
		[Association(Name="discipline_topic", Storage="_discipline", ThisKey="discipline_id", OtherKey="id", IsForeignKey=true)]
		public discipline discipline
		{
			get
			{
				return this._discipline.Entity;
			}
			set
			{
				discipline previousValue = this._discipline.Entity;
				if (((previousValue != value) 
							|| (this._discipline.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._discipline.Entity = null;
						previousValue.topics.Remove(this);
					}
					this._discipline.Entity = value;
					if ((value != null))
					{
						value.topics.Add(this);
						this._discipline_id = value.id;
					}
					else
					{
						this._discipline_id = default(long);
					}
					this.SendPropertyChanged("discipline");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_razdels(razdel entity)
		{
			this.SendPropertyChanging();
			entity.topic = this;
		}
		
		private void detach_razdels(razdel entity)
		{
			this.SendPropertyChanging();
			entity.topic = null;
		}
	}
	
	[Table(Name="dbo.questions")]
	public partial class question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _razdel_id;
		
		private int _type;
		
		private string _text;
		
		private long _assigned_count;
		
		private long _right_answers_count;
		
		private long _wrong_answers_count;
		
		private int _double_group;
		
		private int _exclusion_group;
		
		private byte _is_deleted;
		
		private EntitySet<answer> _answers;
		
		private EntityRef<razdel> _razdel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Onrazdel_idChanging(long value);
    partial void Onrazdel_idChanged();
    partial void OntypeChanging(int value);
    partial void OntypeChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void Onassigned_countChanging(long value);
    partial void Onassigned_countChanged();
    partial void Onright_answers_countChanging(long value);
    partial void Onright_answers_countChanged();
    partial void Onwrong_answers_countChanging(long value);
    partial void Onwrong_answers_countChanged();
    partial void Ondouble_groupChanging(int value);
    partial void Ondouble_groupChanged();
    partial void Onexclusion_groupChanging(int value);
    partial void Onexclusion_groupChanged();
    partial void Onis_deletedChanging(byte value);
    partial void Onis_deletedChanged();
    #endregion
		
		public question()
		{
			this._answers = new EntitySet<answer>(new Action<answer>(this.attach_answers), new Action<answer>(this.detach_answers));
			this._razdel = default(EntityRef<razdel>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_razdel_id", DbType="BigInt NOT NULL")]
		public long razdel_id
		{
			get
			{
				return this._razdel_id;
			}
			set
			{
				if ((this._razdel_id != value))
				{
					if (this._razdel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onrazdel_idChanging(value);
					this.SendPropertyChanging();
					this._razdel_id = value;
					this.SendPropertyChanged("razdel_id");
					this.Onrazdel_idChanged();
				}
			}
		}
		
		[Column(Storage="_type", DbType="Int NOT NULL")]
		public int type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[Column(Storage="_text", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[Column(Storage="_assigned_count", DbType="BigInt NOT NULL")]
		public long assigned_count
		{
			get
			{
				return this._assigned_count;
			}
			set
			{
				if ((this._assigned_count != value))
				{
					this.Onassigned_countChanging(value);
					this.SendPropertyChanging();
					this._assigned_count = value;
					this.SendPropertyChanged("assigned_count");
					this.Onassigned_countChanged();
				}
			}
		}
		
		[Column(Storage="_right_answers_count", DbType="BigInt NOT NULL")]
		public long right_answers_count
		{
			get
			{
				return this._right_answers_count;
			}
			set
			{
				if ((this._right_answers_count != value))
				{
					this.Onright_answers_countChanging(value);
					this.SendPropertyChanging();
					this._right_answers_count = value;
					this.SendPropertyChanged("right_answers_count");
					this.Onright_answers_countChanged();
				}
			}
		}
		
		[Column(Storage="_wrong_answers_count", DbType="BigInt NOT NULL")]
		public long wrong_answers_count
		{
			get
			{
				return this._wrong_answers_count;
			}
			set
			{
				if ((this._wrong_answers_count != value))
				{
					this.Onwrong_answers_countChanging(value);
					this.SendPropertyChanging();
					this._wrong_answers_count = value;
					this.SendPropertyChanged("wrong_answers_count");
					this.Onwrong_answers_countChanged();
				}
			}
		}
		
		[Column(Storage="_double_group", DbType="Int NOT NULL")]
		public int double_group
		{
			get
			{
				return this._double_group;
			}
			set
			{
				if ((this._double_group != value))
				{
					this.Ondouble_groupChanging(value);
					this.SendPropertyChanging();
					this._double_group = value;
					this.SendPropertyChanged("double_group");
					this.Ondouble_groupChanged();
				}
			}
		}
		
		[Column(Storage="_exclusion_group", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int exclusion_group
		{
			get
			{
				return this._exclusion_group;
			}
			set
			{
				if ((this._exclusion_group != value))
				{
					this.Onexclusion_groupChanging(value);
					this.SendPropertyChanging();
					this._exclusion_group = value;
					this.SendPropertyChanged("exclusion_group");
					this.Onexclusion_groupChanged();
				}
			}
		}
		
		[Column(Storage="_is_deleted", DbType="TinyInt NOT NULL")]
		public byte is_deleted
		{
			get
			{
				return this._is_deleted;
			}
			set
			{
				if ((this._is_deleted != value))
				{
					this.Onis_deletedChanging(value);
					this.SendPropertyChanging();
					this._is_deleted = value;
					this.SendPropertyChanged("is_deleted");
					this.Onis_deletedChanged();
				}
			}
		}
		
		[Association(Name="question_answer", Storage="_answers", ThisKey="id", OtherKey="question_id")]
		public EntitySet<answer> answers
		{
			get
			{
				return this._answers;
			}
			set
			{
				this._answers.Assign(value);
			}
		}
		
		[Association(Name="razdel_question", Storage="_razdel", ThisKey="razdel_id", OtherKey="id", IsForeignKey=true)]
		public razdel razdel
		{
			get
			{
				return this._razdel.Entity;
			}
			set
			{
				razdel previousValue = this._razdel.Entity;
				if (((previousValue != value) 
							|| (this._razdel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._razdel.Entity = null;
						previousValue.questions.Remove(this);
					}
					this._razdel.Entity = value;
					if ((value != null))
					{
						value.questions.Add(this);
						this._razdel_id = value.id;
					}
					else
					{
						this._razdel_id = default(long);
					}
					this.SendPropertyChanged("razdel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_answers(answer entity)
		{
			this.SendPropertyChanging();
			entity.question = this;
		}
		
		private void detach_answers(answer entity)
		{
			this.SendPropertyChanging();
			entity.question = null;
		}
	}
	
	[Table(Name="dbo.answers")]
	public partial class answer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _question_id;
		
		private string _text;
		
		private double _score;
		
		private EntityRef<question> _question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Onquestion_idChanging(long value);
    partial void Onquestion_idChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OnscoreChanging(double value);
    partial void OnscoreChanged();
    #endregion
		
		public answer()
		{
			this._question = default(EntityRef<question>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_question_id", DbType="BigInt NOT NULL")]
		public long question_id
		{
			get
			{
				return this._question_id;
			}
			set
			{
				if ((this._question_id != value))
				{
					if (this._question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onquestion_idChanging(value);
					this.SendPropertyChanging();
					this._question_id = value;
					this.SendPropertyChanged("question_id");
					this.Onquestion_idChanged();
				}
			}
		}
		
		[Column(Storage="_text", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[Column(Storage="_score", DbType="Float NOT NULL")]
		public double score
		{
			get
			{
				return this._score;
			}
			set
			{
				if ((this._score != value))
				{
					this.OnscoreChanging(value);
					this.SendPropertyChanging();
					this._score = value;
					this.SendPropertyChanged("score");
					this.OnscoreChanged();
				}
			}
		}
		
		[Association(Name="question_answer", Storage="_question", ThisKey="question_id", OtherKey="id", IsForeignKey=true)]
		public question question
		{
			get
			{
				return this._question.Entity;
			}
			set
			{
				question previousValue = this._question.Entity;
				if (((previousValue != value) 
							|| (this._question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._question.Entity = null;
						previousValue.answers.Remove(this);
					}
					this._question.Entity = value;
					if ((value != null))
					{
						value.answers.Add(this);
						this._question_id = value.id;
					}
					else
					{
						this._question_id = default(long);
					}
					this.SendPropertyChanged("question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
