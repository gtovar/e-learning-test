#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VmkLearningKit.Models.Repository
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="VLK_DB")]
	public partial class VmkLearningKitDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAnswer(Answer instance);
    partial void UpdateAnswer(Answer instance);
    partial void DeleteAnswer(Answer instance);
    partial void InsertAssignedTestVariant(AssignedTestVariant instance);
    partial void UpdateAssignedTestVariant(AssignedTestVariant instance);
    partial void DeleteAssignedTestVariant(AssignedTestVariant instance);
    partial void InsertChair(Chair instance);
    partial void UpdateChair(Chair instance);
    partial void DeleteChair(Chair instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertDiscipline(Discipline instance);
    partial void UpdateDiscipline(Discipline instance);
    partial void DeleteDiscipline(Discipline instance);
    partial void InsertEducationPlan(EducationPlan instance);
    partial void UpdateEducationPlan(EducationPlan instance);
    partial void DeleteEducationPlan(EducationPlan instance);
    partial void InsertGeneratedQuestion(GeneratedQuestion instance);
    partial void UpdateGeneratedQuestion(GeneratedQuestion instance);
    partial void DeleteGeneratedQuestion(GeneratedQuestion instance);
    partial void InsertGeneratedTest(GeneratedTest instance);
    partial void UpdateGeneratedTest(GeneratedTest instance);
    partial void DeleteGeneratedTest(GeneratedTest instance);
    partial void InsertGeneratedTestVariant(GeneratedTestVariant instance);
    partial void UpdateGeneratedTestVariant(GeneratedTestVariant instance);
    partial void DeleteGeneratedTestVariant(GeneratedTestVariant instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertLecturePlan(LecturePlan instance);
    partial void UpdateLecturePlan(LecturePlan instance);
    partial void DeleteLecturePlan(LecturePlan instance);
    partial void InsertLectureTimetable(LectureTimetable instance);
    partial void UpdateLectureTimetable(LectureTimetable instance);
    partial void DeleteLectureTimetable(LectureTimetable instance);
    partial void InsertPracticeAndLabTimetable(PracticeAndLabTimetable instance);
    partial void UpdatePracticeAndLabTimetable(PracticeAndLabTimetable instance);
    partial void DeletePracticeAndLabTimetable(PracticeAndLabTimetable instance);
    partial void InsertPracticePlan(PracticePlan instance);
    partial void UpdatePracticePlan(PracticePlan instance);
    partial void DeletePracticePlan(PracticePlan instance);
    partial void InsertProfessor(Professor instance);
    partial void UpdateProfessor(Professor instance);
    partial void DeleteProfessor(Professor instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    partial void InsertRazdel(Razdel instance);
    partial void UpdateRazdel(Razdel instance);
    partial void DeleteRazdel(Razdel instance);
    partial void InsertSpeciality(Speciality instance);
    partial void UpdateSpeciality(Speciality instance);
    partial void DeleteSpeciality(Speciality instance);
    partial void InsertSpecialityDiscipline(SpecialityDiscipline instance);
    partial void UpdateSpecialityDiscipline(SpecialityDiscipline instance);
    partial void DeleteSpecialityDiscipline(SpecialityDiscipline instance);
    partial void InsertSpecialization(Specialization instance);
    partial void UpdateSpecialization(Specialization instance);
    partial void DeleteSpecialization(Specialization instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertTopic(Topic instance);
    partial void UpdateTopic(Topic instance);
    partial void DeleteTopic(Topic instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public VmkLearningKitDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["VLK_DBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public VmkLearningKitDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VmkLearningKitDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VmkLearningKitDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VmkLearningKitDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Answer> Answers
		{
			get
			{
				return this.GetTable<Answer>();
			}
		}
		
		public System.Data.Linq.Table<AssignedTestVariant> AssignedTestVariants
		{
			get
			{
				return this.GetTable<AssignedTestVariant>();
			}
		}
		
		public System.Data.Linq.Table<Chair> Chairs
		{
			get
			{
				return this.GetTable<Chair>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Discipline> Disciplines
		{
			get
			{
				return this.GetTable<Discipline>();
			}
		}
		
		public System.Data.Linq.Table<EducationPlan> EducationPlans
		{
			get
			{
				return this.GetTable<EducationPlan>();
			}
		}
		
		public System.Data.Linq.Table<GeneratedQuestion> GeneratedQuestions
		{
			get
			{
				return this.GetTable<GeneratedQuestion>();
			}
		}
		
		public System.Data.Linq.Table<GeneratedTest> GeneratedTests
		{
			get
			{
				return this.GetTable<GeneratedTest>();
			}
		}
		
		public System.Data.Linq.Table<GeneratedTestVariant> GeneratedTestVariants
		{
			get
			{
				return this.GetTable<GeneratedTestVariant>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<LecturePlan> LecturePlans
		{
			get
			{
				return this.GetTable<LecturePlan>();
			}
		}
		
		public System.Data.Linq.Table<LectureTimetable> LectureTimetables
		{
			get
			{
				return this.GetTable<LectureTimetable>();
			}
		}
		
		public System.Data.Linq.Table<PracticeAndLabTimetable> PracticeAndLabTimetables
		{
			get
			{
				return this.GetTable<PracticeAndLabTimetable>();
			}
		}
		
		public System.Data.Linq.Table<PracticePlan> PracticePlans
		{
			get
			{
				return this.GetTable<PracticePlan>();
			}
		}
		
		public System.Data.Linq.Table<Professor> Professors
		{
			get
			{
				return this.GetTable<Professor>();
			}
		}
		
		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		public System.Data.Linq.Table<Razdel> Razdels
		{
			get
			{
				return this.GetTable<Razdel>();
			}
		}
		
		public System.Data.Linq.Table<Speciality> Specialities
		{
			get
			{
				return this.GetTable<Speciality>();
			}
		}
		
		public System.Data.Linq.Table<SpecialityDiscipline> SpecialityDisciplines
		{
			get
			{
				return this.GetTable<SpecialityDiscipline>();
			}
		}
		
		public System.Data.Linq.Table<Specialization> Specializations
		{
			get
			{
				return this.GetTable<Specialization>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<Topic> Topics
		{
			get
			{
				return this.GetTable<Topic>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[Table(Name="dbo.Answers")]
	public partial class Answer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _QuestionId;
		
		private string _Text;
		
		private double _Score;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnQuestionIdChanging(long value);
    partial void OnQuestionIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnScoreChanging(double value);
    partial void OnScoreChanged();
    #endregion
		
		public Answer()
		{
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_QuestionId", DbType="BigInt NOT NULL")]
		public long QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Storage="_Score", DbType="Float NOT NULL")]
		public double Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[Association(Name="Question_Answer", Storage="_Question", ThisKey="QuestionId", OtherKey="Id", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.Answers.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.Answers.Add(this);
						this._QuestionId = value.Id;
					}
					else
					{
						this._QuestionId = default(long);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.AssignedTestVariants")]
	public partial class AssignedTestVariant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _GeneratedTestVariantId;
		
		private long _StudentId;
		
		private System.DateTime _AssignedDate;
		
		private int _State;
		
		private int _Score;
		
		private int _Mark;
		
		private string _Path;
		
		private EntityRef<GeneratedTestVariant> _GeneratedTestVariant;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnGeneratedTestVariantIdChanging(long value);
    partial void OnGeneratedTestVariantIdChanged();
    partial void OnStudentIdChanging(long value);
    partial void OnStudentIdChanged();
    partial void OnAssignedDateChanging(System.DateTime value);
    partial void OnAssignedDateChanged();
    partial void OnStateChanging(int value);
    partial void OnStateChanged();
    partial void OnScoreChanging(int value);
    partial void OnScoreChanged();
    partial void OnMarkChanging(int value);
    partial void OnMarkChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    #endregion
		
		public AssignedTestVariant()
		{
			this._GeneratedTestVariant = default(EntityRef<GeneratedTestVariant>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_GeneratedTestVariantId", DbType="BigInt NOT NULL")]
		public long GeneratedTestVariantId
		{
			get
			{
				return this._GeneratedTestVariantId;
			}
			set
			{
				if ((this._GeneratedTestVariantId != value))
				{
					if (this._GeneratedTestVariant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGeneratedTestVariantIdChanging(value);
					this.SendPropertyChanging();
					this._GeneratedTestVariantId = value;
					this.SendPropertyChanged("GeneratedTestVariantId");
					this.OnGeneratedTestVariantIdChanged();
				}
			}
		}
		
		[Column(Storage="_StudentId", DbType="BigInt NOT NULL")]
		public long StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[Column(Storage="_AssignedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AssignedDate
		{
			get
			{
				return this._AssignedDate;
			}
			set
			{
				if ((this._AssignedDate != value))
				{
					this.OnAssignedDateChanging(value);
					this.SendPropertyChanging();
					this._AssignedDate = value;
					this.SendPropertyChanged("AssignedDate");
					this.OnAssignedDateChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="Int NOT NULL")]
		public int State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_Score", DbType="Int NOT NULL")]
		public int Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[Column(Storage="_Mark", DbType="Int NOT NULL")]
		public int Mark
		{
			get
			{
				return this._Mark;
			}
			set
			{
				if ((this._Mark != value))
				{
					this.OnMarkChanging(value);
					this.SendPropertyChanging();
					this._Mark = value;
					this.SendPropertyChanged("Mark");
					this.OnMarkChanged();
				}
			}
		}
		
		[Column(Storage="_Path", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[Association(Name="GeneratedTestVariant_AssignedTestVariant", Storage="_GeneratedTestVariant", ThisKey="GeneratedTestVariantId", OtherKey="Id", IsForeignKey=true)]
		public GeneratedTestVariant GeneratedTestVariant
		{
			get
			{
				return this._GeneratedTestVariant.Entity;
			}
			set
			{
				GeneratedTestVariant previousValue = this._GeneratedTestVariant.Entity;
				if (((previousValue != value) 
							|| (this._GeneratedTestVariant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeneratedTestVariant.Entity = null;
						previousValue.AssignedTestVariants.Remove(this);
					}
					this._GeneratedTestVariant.Entity = value;
					if ((value != null))
					{
						value.AssignedTestVariants.Add(this);
						this._GeneratedTestVariantId = value.Id;
					}
					else
					{
						this._GeneratedTestVariantId = default(long);
					}
					this.SendPropertyChanged("GeneratedTestVariant");
				}
			}
		}
		
		[Association(Name="Student_AssignedTestVariant", Storage="_Student", ThisKey="StudentId", OtherKey="UserId", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.AssignedTestVariants.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.AssignedTestVariants.Add(this);
						this._StudentId = value.UserId;
					}
					else
					{
						this._StudentId = default(long);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Chairs")]
	public partial class Chair : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _DepartmentId;
		
		private string _Title;
		
		private string _Abbreviation;
		
		private string _Alias;
		
		private string _Description;
		
		private EntitySet<Professor> _Professors;
		
		private EntitySet<SpecialityDiscipline> _SpecialityDisciplines;
		
		private EntitySet<Specialization> _Specializations;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnDepartmentIdChanging(long value);
    partial void OnDepartmentIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnAbbreviationChanging(string value);
    partial void OnAbbreviationChanged();
    partial void OnAliasChanging(string value);
    partial void OnAliasChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Chair()
		{
			this._Professors = new EntitySet<Professor>(new Action<Professor>(this.attach_Professors), new Action<Professor>(this.detach_Professors));
			this._SpecialityDisciplines = new EntitySet<SpecialityDiscipline>(new Action<SpecialityDiscipline>(this.attach_SpecialityDisciplines), new Action<SpecialityDiscipline>(this.detach_SpecialityDisciplines));
			this._Specializations = new EntitySet<Specialization>(new Action<Specialization>(this.attach_Specializations), new Action<Specialization>(this.detach_Specializations));
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentId", DbType="BigInt NOT NULL")]
		public long DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Abbreviation", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Abbreviation
		{
			get
			{
				return this._Abbreviation;
			}
			set
			{
				if ((this._Abbreviation != value))
				{
					this.OnAbbreviationChanging(value);
					this.SendPropertyChanging();
					this._Abbreviation = value;
					this.SendPropertyChanged("Abbreviation");
					this.OnAbbreviationChanged();
				}
			}
		}
		
		[Column(Storage="_Alias", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Alias
		{
			get
			{
				return this._Alias;
			}
			set
			{
				if ((this._Alias != value))
				{
					this.OnAliasChanging(value);
					this.SendPropertyChanging();
					this._Alias = value;
					this.SendPropertyChanged("Alias");
					this.OnAliasChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Chair_Professor", Storage="_Professors", ThisKey="Id", OtherKey="ChairId")]
		public EntitySet<Professor> Professors
		{
			get
			{
				return this._Professors;
			}
			set
			{
				this._Professors.Assign(value);
			}
		}
		
		[Association(Name="Chair_SpecialityDiscipline", Storage="_SpecialityDisciplines", ThisKey="Id", OtherKey="ChairId")]
		public EntitySet<SpecialityDiscipline> SpecialityDisciplines
		{
			get
			{
				return this._SpecialityDisciplines;
			}
			set
			{
				this._SpecialityDisciplines.Assign(value);
			}
		}
		
		[Association(Name="Chair_Specialization", Storage="_Specializations", ThisKey="Id", OtherKey="ChairId")]
		public EntitySet<Specialization> Specializations
		{
			get
			{
				return this._Specializations;
			}
			set
			{
				this._Specializations.Assign(value);
			}
		}
		
		[Association(Name="Department_Chair", Storage="_Department", ThisKey="DepartmentId", OtherKey="Id", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Chairs.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Chairs.Add(this);
						this._DepartmentId = value.Id;
					}
					else
					{
						this._DepartmentId = default(long);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Professors(Professor entity)
		{
			this.SendPropertyChanging();
			entity.Chair = this;
		}
		
		private void detach_Professors(Professor entity)
		{
			this.SendPropertyChanging();
			entity.Chair = null;
		}
		
		private void attach_SpecialityDisciplines(SpecialityDiscipline entity)
		{
			this.SendPropertyChanging();
			entity.Chair = this;
		}
		
		private void detach_SpecialityDisciplines(SpecialityDiscipline entity)
		{
			this.SendPropertyChanging();
			entity.Chair = null;
		}
		
		private void attach_Specializations(Specialization entity)
		{
			this.SendPropertyChanging();
			entity.Chair = this;
		}
		
		private void detach_Specializations(Specialization entity)
		{
			this.SendPropertyChanging();
			entity.Chair = null;
		}
	}
	
	[Table(Name="dbo.Comments")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _QuestionId;
		
		private long _StudentId;
		
		private string _Text;
		
		private EntityRef<Question> _Question;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnQuestionIdChanging(long value);
    partial void OnQuestionIdChanged();
    partial void OnStudentIdChanging(long value);
    partial void OnStudentIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public Comment()
		{
			this._Question = default(EntityRef<Question>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_QuestionId", DbType="BigInt NOT NULL")]
		public long QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[Column(Storage="_StudentId", DbType="BigInt NOT NULL")]
		public long StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Association(Name="Question_Comment", Storage="_Question", ThisKey="QuestionId", OtherKey="Id", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._QuestionId = value.Id;
					}
					else
					{
						this._QuestionId = default(long);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		[Association(Name="Student_Comment", Storage="_Student", ThisKey="StudentId", OtherKey="UserId", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._StudentId = value.UserId;
					}
					else
					{
						this._StudentId = default(long);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Departments")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Alias;
		
		private string _Title;
		
		private string _Abbreviation;
		
		private string _Description;
		
		private EntitySet<Chair> _Chairs;
		
		private EntitySet<Discipline> _Disciplines;
		
		private EntitySet<Group> _Groups;
		
		private EntitySet<Speciality> _Specialities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAliasChanging(string value);
    partial void OnAliasChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnAbbreviationChanging(string value);
    partial void OnAbbreviationChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Department()
		{
			this._Chairs = new EntitySet<Chair>(new Action<Chair>(this.attach_Chairs), new Action<Chair>(this.detach_Chairs));
			this._Disciplines = new EntitySet<Discipline>(new Action<Discipline>(this.attach_Disciplines), new Action<Discipline>(this.detach_Disciplines));
			this._Groups = new EntitySet<Group>(new Action<Group>(this.attach_Groups), new Action<Group>(this.detach_Groups));
			this._Specialities = new EntitySet<Speciality>(new Action<Speciality>(this.attach_Specialities), new Action<Speciality>(this.detach_Specialities));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Alias", DbType="NVarChar(64)")]
		public string Alias
		{
			get
			{
				return this._Alias;
			}
			set
			{
				if ((this._Alias != value))
				{
					this.OnAliasChanging(value);
					this.SendPropertyChanging();
					this._Alias = value;
					this.SendPropertyChanged("Alias");
					this.OnAliasChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Abbreviation", DbType="NVarChar(64)")]
		public string Abbreviation
		{
			get
			{
				return this._Abbreviation;
			}
			set
			{
				if ((this._Abbreviation != value))
				{
					this.OnAbbreviationChanging(value);
					this.SendPropertyChanging();
					this._Abbreviation = value;
					this.SendPropertyChanged("Abbreviation");
					this.OnAbbreviationChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Department_Chair", Storage="_Chairs", ThisKey="Id", OtherKey="DepartmentId")]
		public EntitySet<Chair> Chairs
		{
			get
			{
				return this._Chairs;
			}
			set
			{
				this._Chairs.Assign(value);
			}
		}
		
		[Association(Name="Department_Discipline", Storage="_Disciplines", ThisKey="Id", OtherKey="DepartmentId")]
		public EntitySet<Discipline> Disciplines
		{
			get
			{
				return this._Disciplines;
			}
			set
			{
				this._Disciplines.Assign(value);
			}
		}
		
		[Association(Name="Department_Group", Storage="_Groups", ThisKey="Id", OtherKey="DepartmentId")]
		public EntitySet<Group> Groups
		{
			get
			{
				return this._Groups;
			}
			set
			{
				this._Groups.Assign(value);
			}
		}
		
		[Association(Name="Department_Speciality", Storage="_Specialities", ThisKey="Id", OtherKey="DepartmentId")]
		public EntitySet<Speciality> Specialities
		{
			get
			{
				return this._Specialities;
			}
			set
			{
				this._Specialities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Chairs(Chair entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Chairs(Chair entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
		
		private void attach_Disciplines(Discipline entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Disciplines(Discipline entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
		
		private void attach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
		
		private void attach_Specialities(Speciality entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Specialities(Speciality entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[Table(Name="dbo.Disciplines")]
	public partial class Discipline : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _DepartmentId;
		
		private string _Title;
		
		private EntitySet<Topic> _Topics;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnDepartmentIdChanging(long value);
    partial void OnDepartmentIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Discipline()
		{
			this._Topics = new EntitySet<Topic>(new Action<Topic>(this.attach_Topics), new Action<Topic>(this.detach_Topics));
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentId", DbType="BigInt NOT NULL")]
		public long DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="Discipline_Topic", Storage="_Topics", ThisKey="Id", OtherKey="DisciplineId")]
		public EntitySet<Topic> Topics
		{
			get
			{
				return this._Topics;
			}
			set
			{
				this._Topics.Assign(value);
			}
		}
		
		[Association(Name="Department_Discipline", Storage="_Department", ThisKey="DepartmentId", OtherKey="Id", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Disciplines.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Disciplines.Add(this);
						this._DepartmentId = value.Id;
					}
					else
					{
						this._DepartmentId = default(long);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Topics(Topic entity)
		{
			this.SendPropertyChanging();
			entity.Discipline = this;
		}
		
		private void detach_Topics(Topic entity)
		{
			this.SendPropertyChanging();
			entity.Discipline = null;
		}
	}
	
	[Table(Name="dbo.EducationPlan")]
	public partial class EducationPlan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Title;
		
		private string _Alias;
		
		private EntitySet<SpecialityDiscipline> _SpecialityDisciplines;
		
		private EntitySet<Specialization> _Specializations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnAliasChanging(string value);
    partial void OnAliasChanged();
    #endregion
		
		public EducationPlan()
		{
			this._SpecialityDisciplines = new EntitySet<SpecialityDiscipline>(new Action<SpecialityDiscipline>(this.attach_SpecialityDisciplines), new Action<SpecialityDiscipline>(this.detach_SpecialityDisciplines));
			this._Specializations = new EntitySet<Specialization>(new Action<Specialization>(this.attach_Specializations), new Action<Specialization>(this.detach_Specializations));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Alias", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Alias
		{
			get
			{
				return this._Alias;
			}
			set
			{
				if ((this._Alias != value))
				{
					this.OnAliasChanging(value);
					this.SendPropertyChanging();
					this._Alias = value;
					this.SendPropertyChanged("Alias");
					this.OnAliasChanged();
				}
			}
		}
		
		[Association(Name="EducationPlan_SpecialityDiscipline", Storage="_SpecialityDisciplines", ThisKey="Id", OtherKey="EducationPlanId")]
		public EntitySet<SpecialityDiscipline> SpecialityDisciplines
		{
			get
			{
				return this._SpecialityDisciplines;
			}
			set
			{
				this._SpecialityDisciplines.Assign(value);
			}
		}
		
		[Association(Name="EducationPlan_Specialization", Storage="_Specializations", ThisKey="Id", OtherKey="EducationPlanId")]
		public EntitySet<Specialization> Specializations
		{
			get
			{
				return this._Specializations;
			}
			set
			{
				this._Specializations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SpecialityDisciplines(SpecialityDiscipline entity)
		{
			this.SendPropertyChanging();
			entity.EducationPlan = this;
		}
		
		private void detach_SpecialityDisciplines(SpecialityDiscipline entity)
		{
			this.SendPropertyChanging();
			entity.EducationPlan = null;
		}
		
		private void attach_Specializations(Specialization entity)
		{
			this.SendPropertyChanging();
			entity.EducationPlan = this;
		}
		
		private void detach_Specializations(Specialization entity)
		{
			this.SendPropertyChanging();
			entity.EducationPlan = null;
		}
	}
	
	[Table(Name="dbo.GeneratedQuestions")]
	public partial class GeneratedQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _GeneratedTestVariantId;
		
		private long _QuestionId;
		
		private EntityRef<GeneratedTestVariant> _GeneratedTestVariant;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnGeneratedTestVariantIdChanging(long value);
    partial void OnGeneratedTestVariantIdChanged();
    partial void OnQuestionIdChanging(long value);
    partial void OnQuestionIdChanged();
    #endregion
		
		public GeneratedQuestion()
		{
			this._GeneratedTestVariant = default(EntityRef<GeneratedTestVariant>);
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_GeneratedTestVariantId", DbType="BigInt NOT NULL")]
		public long GeneratedTestVariantId
		{
			get
			{
				return this._GeneratedTestVariantId;
			}
			set
			{
				if ((this._GeneratedTestVariantId != value))
				{
					if (this._GeneratedTestVariant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGeneratedTestVariantIdChanging(value);
					this.SendPropertyChanging();
					this._GeneratedTestVariantId = value;
					this.SendPropertyChanged("GeneratedTestVariantId");
					this.OnGeneratedTestVariantIdChanged();
				}
			}
		}
		
		[Column(Storage="_QuestionId", DbType="BigInt NOT NULL")]
		public long QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[Association(Name="GeneratedTestVariant_GeneratedQuestion", Storage="_GeneratedTestVariant", ThisKey="GeneratedTestVariantId", OtherKey="Id", IsForeignKey=true)]
		public GeneratedTestVariant GeneratedTestVariant
		{
			get
			{
				return this._GeneratedTestVariant.Entity;
			}
			set
			{
				GeneratedTestVariant previousValue = this._GeneratedTestVariant.Entity;
				if (((previousValue != value) 
							|| (this._GeneratedTestVariant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeneratedTestVariant.Entity = null;
						previousValue.GeneratedQuestions.Remove(this);
					}
					this._GeneratedTestVariant.Entity = value;
					if ((value != null))
					{
						value.GeneratedQuestions.Add(this);
						this._GeneratedTestVariantId = value.Id;
					}
					else
					{
						this._GeneratedTestVariantId = default(long);
					}
					this.SendPropertyChanged("GeneratedTestVariant");
				}
			}
		}
		
		[Association(Name="Question_GeneratedQuestion", Storage="_Question", ThisKey="QuestionId", OtherKey="Id", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.GeneratedQuestions.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.GeneratedQuestions.Add(this);
						this._QuestionId = value.Id;
					}
					else
					{
						this._QuestionId = default(long);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.GeneratedTests")]
	public partial class GeneratedTest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _TopicId;
		
		private int _VariantsCount;
		
		private System.DateTime _GeneratedDate;
		
		private int _QuestionsCount;
		
		private EntitySet<GeneratedTestVariant> _GeneratedTestVariants;
		
		private EntityRef<Topic> _Topic;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnTopicIdChanging(long value);
    partial void OnTopicIdChanged();
    partial void OnVariantsCountChanging(int value);
    partial void OnVariantsCountChanged();
    partial void OnGeneratedDateChanging(System.DateTime value);
    partial void OnGeneratedDateChanged();
    partial void OnQuestionsCountChanging(int value);
    partial void OnQuestionsCountChanged();
    #endregion
		
		public GeneratedTest()
		{
			this._GeneratedTestVariants = new EntitySet<GeneratedTestVariant>(new Action<GeneratedTestVariant>(this.attach_GeneratedTestVariants), new Action<GeneratedTestVariant>(this.detach_GeneratedTestVariants));
			this._Topic = default(EntityRef<Topic>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_TopicId", DbType="BigInt NOT NULL")]
		public long TopicId
		{
			get
			{
				return this._TopicId;
			}
			set
			{
				if ((this._TopicId != value))
				{
					if (this._Topic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTopicIdChanging(value);
					this.SendPropertyChanging();
					this._TopicId = value;
					this.SendPropertyChanged("TopicId");
					this.OnTopicIdChanged();
				}
			}
		}
		
		[Column(Storage="_VariantsCount", DbType="Int NOT NULL")]
		public int VariantsCount
		{
			get
			{
				return this._VariantsCount;
			}
			set
			{
				if ((this._VariantsCount != value))
				{
					this.OnVariantsCountChanging(value);
					this.SendPropertyChanging();
					this._VariantsCount = value;
					this.SendPropertyChanged("VariantsCount");
					this.OnVariantsCountChanged();
				}
			}
		}
		
		[Column(Storage="_GeneratedDate", DbType="DateTime NOT NULL")]
		public System.DateTime GeneratedDate
		{
			get
			{
				return this._GeneratedDate;
			}
			set
			{
				if ((this._GeneratedDate != value))
				{
					this.OnGeneratedDateChanging(value);
					this.SendPropertyChanging();
					this._GeneratedDate = value;
					this.SendPropertyChanged("GeneratedDate");
					this.OnGeneratedDateChanged();
				}
			}
		}
		
		[Column(Storage="_QuestionsCount", DbType="Int NOT NULL")]
		public int QuestionsCount
		{
			get
			{
				return this._QuestionsCount;
			}
			set
			{
				if ((this._QuestionsCount != value))
				{
					this.OnQuestionsCountChanging(value);
					this.SendPropertyChanging();
					this._QuestionsCount = value;
					this.SendPropertyChanged("QuestionsCount");
					this.OnQuestionsCountChanged();
				}
			}
		}
		
		[Association(Name="GeneratedTest_GeneratedTestVariant", Storage="_GeneratedTestVariants", ThisKey="Id", OtherKey="GeneratedTestId")]
		public EntitySet<GeneratedTestVariant> GeneratedTestVariants
		{
			get
			{
				return this._GeneratedTestVariants;
			}
			set
			{
				this._GeneratedTestVariants.Assign(value);
			}
		}
		
		[Association(Name="Topic_GeneratedTest", Storage="_Topic", ThisKey="TopicId", OtherKey="Id", IsForeignKey=true)]
		public Topic Topic
		{
			get
			{
				return this._Topic.Entity;
			}
			set
			{
				Topic previousValue = this._Topic.Entity;
				if (((previousValue != value) 
							|| (this._Topic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Topic.Entity = null;
						previousValue.GeneratedTests.Remove(this);
					}
					this._Topic.Entity = value;
					if ((value != null))
					{
						value.GeneratedTests.Add(this);
						this._TopicId = value.Id;
					}
					else
					{
						this._TopicId = default(long);
					}
					this.SendPropertyChanged("Topic");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GeneratedTestVariants(GeneratedTestVariant entity)
		{
			this.SendPropertyChanging();
			entity.GeneratedTest = this;
		}
		
		private void detach_GeneratedTestVariants(GeneratedTestVariant entity)
		{
			this.SendPropertyChanging();
			entity.GeneratedTest = null;
		}
	}
	
	[Table(Name="dbo.GeneratedTestVariants")]
	public partial class GeneratedTestVariant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _GeneratedTestId;
		
		private EntitySet<AssignedTestVariant> _AssignedTestVariants;
		
		private EntitySet<GeneratedQuestion> _GeneratedQuestions;
		
		private EntityRef<GeneratedTest> _GeneratedTest;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnGeneratedTestIdChanging(long value);
    partial void OnGeneratedTestIdChanged();
    #endregion
		
		public GeneratedTestVariant()
		{
			this._AssignedTestVariants = new EntitySet<AssignedTestVariant>(new Action<AssignedTestVariant>(this.attach_AssignedTestVariants), new Action<AssignedTestVariant>(this.detach_AssignedTestVariants));
			this._GeneratedQuestions = new EntitySet<GeneratedQuestion>(new Action<GeneratedQuestion>(this.attach_GeneratedQuestions), new Action<GeneratedQuestion>(this.detach_GeneratedQuestions));
			this._GeneratedTest = default(EntityRef<GeneratedTest>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_GeneratedTestId", DbType="BigInt NOT NULL")]
		public long GeneratedTestId
		{
			get
			{
				return this._GeneratedTestId;
			}
			set
			{
				if ((this._GeneratedTestId != value))
				{
					if (this._GeneratedTest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGeneratedTestIdChanging(value);
					this.SendPropertyChanging();
					this._GeneratedTestId = value;
					this.SendPropertyChanged("GeneratedTestId");
					this.OnGeneratedTestIdChanged();
				}
			}
		}
		
		[Association(Name="GeneratedTestVariant_AssignedTestVariant", Storage="_AssignedTestVariants", ThisKey="Id", OtherKey="GeneratedTestVariantId")]
		public EntitySet<AssignedTestVariant> AssignedTestVariants
		{
			get
			{
				return this._AssignedTestVariants;
			}
			set
			{
				this._AssignedTestVariants.Assign(value);
			}
		}
		
		[Association(Name="GeneratedTestVariant_GeneratedQuestion", Storage="_GeneratedQuestions", ThisKey="Id", OtherKey="GeneratedTestVariantId")]
		public EntitySet<GeneratedQuestion> GeneratedQuestions
		{
			get
			{
				return this._GeneratedQuestions;
			}
			set
			{
				this._GeneratedQuestions.Assign(value);
			}
		}
		
		[Association(Name="GeneratedTest_GeneratedTestVariant", Storage="_GeneratedTest", ThisKey="GeneratedTestId", OtherKey="Id", IsForeignKey=true)]
		public GeneratedTest GeneratedTest
		{
			get
			{
				return this._GeneratedTest.Entity;
			}
			set
			{
				GeneratedTest previousValue = this._GeneratedTest.Entity;
				if (((previousValue != value) 
							|| (this._GeneratedTest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeneratedTest.Entity = null;
						previousValue.GeneratedTestVariants.Remove(this);
					}
					this._GeneratedTest.Entity = value;
					if ((value != null))
					{
						value.GeneratedTestVariants.Add(this);
						this._GeneratedTestId = value.Id;
					}
					else
					{
						this._GeneratedTestId = default(long);
					}
					this.SendPropertyChanged("GeneratedTest");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AssignedTestVariants(AssignedTestVariant entity)
		{
			this.SendPropertyChanging();
			entity.GeneratedTestVariant = this;
		}
		
		private void detach_AssignedTestVariants(AssignedTestVariant entity)
		{
			this.SendPropertyChanging();
			entity.GeneratedTestVariant = null;
		}
		
		private void attach_GeneratedQuestions(GeneratedQuestion entity)
		{
			this.SendPropertyChanging();
			entity.GeneratedTestVariant = this;
		}
		
		private void detach_GeneratedQuestions(GeneratedQuestion entity)
		{
			this.SendPropertyChanging();
			entity.GeneratedTestVariant = null;
		}
	}
	
	[Table(Name="dbo.Groups")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _SpecialityId;
		
		private long _DepartmentId;
		
		private string _Title;
		
		private EntitySet<PracticeAndLabTimetable> _PracticeAndLabTimetables;
		
		private EntitySet<PracticePlan> _PracticePlans;
		
		private EntitySet<Student> _Students;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnSpecialityIdChanging(long value);
    partial void OnSpecialityIdChanged();
    partial void OnDepartmentIdChanging(long value);
    partial void OnDepartmentIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Group()
		{
			this._PracticeAndLabTimetables = new EntitySet<PracticeAndLabTimetable>(new Action<PracticeAndLabTimetable>(this.attach_PracticeAndLabTimetables), new Action<PracticeAndLabTimetable>(this.detach_PracticeAndLabTimetables));
			this._PracticePlans = new EntitySet<PracticePlan>(new Action<PracticePlan>(this.attach_PracticePlans), new Action<PracticePlan>(this.detach_PracticePlans));
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SpecialityId", DbType="BigInt NOT NULL")]
		public long SpecialityId
		{
			get
			{
				return this._SpecialityId;
			}
			set
			{
				if ((this._SpecialityId != value))
				{
					this.OnSpecialityIdChanging(value);
					this.SendPropertyChanging();
					this._SpecialityId = value;
					this.SendPropertyChanged("SpecialityId");
					this.OnSpecialityIdChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentId", DbType="BigInt NOT NULL")]
		public long DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="Group_PracticeAndLabTimetable", Storage="_PracticeAndLabTimetables", ThisKey="Id", OtherKey="GroupId")]
		public EntitySet<PracticeAndLabTimetable> PracticeAndLabTimetables
		{
			get
			{
				return this._PracticeAndLabTimetables;
			}
			set
			{
				this._PracticeAndLabTimetables.Assign(value);
			}
		}
		
		[Association(Name="Group_PracticePlan", Storage="_PracticePlans", ThisKey="Id", OtherKey="GroupId")]
		public EntitySet<PracticePlan> PracticePlans
		{
			get
			{
				return this._PracticePlans;
			}
			set
			{
				this._PracticePlans.Assign(value);
			}
		}
		
		[Association(Name="Group_Student", Storage="_Students", ThisKey="Id", OtherKey="GroupId")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		[Association(Name="Department_Group", Storage="_Department", ThisKey="DepartmentId", OtherKey="Id", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Groups.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Groups.Add(this);
						this._DepartmentId = value.Id;
					}
					else
					{
						this._DepartmentId = default(long);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PracticeAndLabTimetables(PracticeAndLabTimetable entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_PracticeAndLabTimetables(PracticeAndLabTimetable entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_PracticePlans(PracticePlan entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_PracticePlans(PracticePlan entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[Table(Name="dbo.LecturePlans")]
	public partial class LecturePlan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _SpecialityDisciplineId;
		
		private string _Topic;
		
		private System.DateTime _Date;
		
		private short _Volume;
		
		private EntityRef<SpecialityDiscipline> _SpecialityDiscipline;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnSpecialityDisciplineIdChanging(long value);
    partial void OnSpecialityDisciplineIdChanged();
    partial void OnTopicChanging(string value);
    partial void OnTopicChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnVolumeChanging(short value);
    partial void OnVolumeChanged();
    #endregion
		
		public LecturePlan()
		{
			this._SpecialityDiscipline = default(EntityRef<SpecialityDiscipline>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SpecialityDisciplineId", DbType="BigInt NOT NULL")]
		public long SpecialityDisciplineId
		{
			get
			{
				return this._SpecialityDisciplineId;
			}
			set
			{
				if ((this._SpecialityDisciplineId != value))
				{
					if (this._SpecialityDiscipline.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialityDisciplineIdChanging(value);
					this.SendPropertyChanging();
					this._SpecialityDisciplineId = value;
					this.SendPropertyChanged("SpecialityDisciplineId");
					this.OnSpecialityDisciplineIdChanged();
				}
			}
		}
		
		[Column(Storage="_Topic", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Topic
		{
			get
			{
				return this._Topic;
			}
			set
			{
				if ((this._Topic != value))
				{
					this.OnTopicChanging(value);
					this.SendPropertyChanging();
					this._Topic = value;
					this.SendPropertyChanged("Topic");
					this.OnTopicChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Volume", DbType="SmallInt NOT NULL")]
		public short Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this.OnVolumeChanging(value);
					this.SendPropertyChanging();
					this._Volume = value;
					this.SendPropertyChanged("Volume");
					this.OnVolumeChanged();
				}
			}
		}
		
		[Association(Name="SpecialityDiscipline_LecturePlan", Storage="_SpecialityDiscipline", ThisKey="SpecialityDisciplineId", OtherKey="Id", IsForeignKey=true)]
		public SpecialityDiscipline SpecialityDiscipline
		{
			get
			{
				return this._SpecialityDiscipline.Entity;
			}
			set
			{
				SpecialityDiscipline previousValue = this._SpecialityDiscipline.Entity;
				if (((previousValue != value) 
							|| (this._SpecialityDiscipline.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SpecialityDiscipline.Entity = null;
						previousValue.LecturePlans.Remove(this);
					}
					this._SpecialityDiscipline.Entity = value;
					if ((value != null))
					{
						value.LecturePlans.Add(this);
						this._SpecialityDisciplineId = value.Id;
					}
					else
					{
						this._SpecialityDisciplineId = default(long);
					}
					this.SendPropertyChanged("SpecialityDiscipline");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.LectureTimetables")]
	public partial class LectureTimetable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _SpecialityDisciplineId;
		
		private long _ProfessorId;
		
		private string _Day;
		
		private System.DateTime _Time;
		
		private short _Building;
		
		private short _Room;
		
		private EntityRef<Professor> _Professor;
		
		private EntityRef<SpecialityDiscipline> _SpecialityDiscipline;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnSpecialityDisciplineIdChanging(long value);
    partial void OnSpecialityDisciplineIdChanged();
    partial void OnProfessorIdChanging(long value);
    partial void OnProfessorIdChanged();
    partial void OnDayChanging(string value);
    partial void OnDayChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    partial void OnBuildingChanging(short value);
    partial void OnBuildingChanged();
    partial void OnRoomChanging(short value);
    partial void OnRoomChanged();
    #endregion
		
		public LectureTimetable()
		{
			this._Professor = default(EntityRef<Professor>);
			this._SpecialityDiscipline = default(EntityRef<SpecialityDiscipline>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SpecialityDisciplineId", DbType="BigInt NOT NULL")]
		public long SpecialityDisciplineId
		{
			get
			{
				return this._SpecialityDisciplineId;
			}
			set
			{
				if ((this._SpecialityDisciplineId != value))
				{
					if (this._SpecialityDiscipline.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialityDisciplineIdChanging(value);
					this.SendPropertyChanging();
					this._SpecialityDisciplineId = value;
					this.SendPropertyChanged("SpecialityDisciplineId");
					this.OnSpecialityDisciplineIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProfessorId", DbType="BigInt NOT NULL")]
		public long ProfessorId
		{
			get
			{
				return this._ProfessorId;
			}
			set
			{
				if ((this._ProfessorId != value))
				{
					if (this._Professor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfessorIdChanging(value);
					this.SendPropertyChanging();
					this._ProfessorId = value;
					this.SendPropertyChanged("ProfessorId");
					this.OnProfessorIdChanged();
				}
			}
		}
		
		[Column(Storage="_Day", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Day
		{
			get
			{
				return this._Day;
			}
			set
			{
				if ((this._Day != value))
				{
					this.OnDayChanging(value);
					this.SendPropertyChanging();
					this._Day = value;
					this.SendPropertyChanged("Day");
					this.OnDayChanged();
				}
			}
		}
		
		[Column(Storage="_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Building", DbType="SmallInt NOT NULL")]
		public short Building
		{
			get
			{
				return this._Building;
			}
			set
			{
				if ((this._Building != value))
				{
					this.OnBuildingChanging(value);
					this.SendPropertyChanging();
					this._Building = value;
					this.SendPropertyChanged("Building");
					this.OnBuildingChanged();
				}
			}
		}
		
		[Column(Storage="_Room", DbType="SmallInt NOT NULL")]
		public short Room
		{
			get
			{
				return this._Room;
			}
			set
			{
				if ((this._Room != value))
				{
					this.OnRoomChanging(value);
					this.SendPropertyChanging();
					this._Room = value;
					this.SendPropertyChanged("Room");
					this.OnRoomChanged();
				}
			}
		}
		
		[Association(Name="Professor_LectureTimetable", Storage="_Professor", ThisKey="ProfessorId", OtherKey="UserId", IsForeignKey=true)]
		public Professor Professor
		{
			get
			{
				return this._Professor.Entity;
			}
			set
			{
				Professor previousValue = this._Professor.Entity;
				if (((previousValue != value) 
							|| (this._Professor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Professor.Entity = null;
						previousValue.LectureTimetables.Remove(this);
					}
					this._Professor.Entity = value;
					if ((value != null))
					{
						value.LectureTimetables.Add(this);
						this._ProfessorId = value.UserId;
					}
					else
					{
						this._ProfessorId = default(long);
					}
					this.SendPropertyChanged("Professor");
				}
			}
		}
		
		[Association(Name="SpecialityDiscipline_LectureTimetable", Storage="_SpecialityDiscipline", ThisKey="SpecialityDisciplineId", OtherKey="Id", IsForeignKey=true)]
		public SpecialityDiscipline SpecialityDiscipline
		{
			get
			{
				return this._SpecialityDiscipline.Entity;
			}
			set
			{
				SpecialityDiscipline previousValue = this._SpecialityDiscipline.Entity;
				if (((previousValue != value) 
							|| (this._SpecialityDiscipline.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SpecialityDiscipline.Entity = null;
						previousValue.LectureTimetables.Remove(this);
					}
					this._SpecialityDiscipline.Entity = value;
					if ((value != null))
					{
						value.LectureTimetables.Add(this);
						this._SpecialityDisciplineId = value.Id;
					}
					else
					{
						this._SpecialityDisciplineId = default(long);
					}
					this.SendPropertyChanged("SpecialityDiscipline");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PracticeAndLabTimetables")]
	public partial class PracticeAndLabTimetable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _SpecializationId;
		
		private long _SpecialityDisciplineId;
		
		private long _GroupId;
		
		private long _ProfessorId;
		
		private string _Day;
		
		private System.DateTime _Time;
		
		private short _Building;
		
		private short _Room;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<Professor> _Professor;
		
		private EntityRef<SpecialityDiscipline> _SpecialityDiscipline;
		
		private EntityRef<Specialization> _Specialization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnSpecializationIdChanging(long value);
    partial void OnSpecializationIdChanged();
    partial void OnSpecialityDisciplineIdChanging(long value);
    partial void OnSpecialityDisciplineIdChanged();
    partial void OnGroupIdChanging(long value);
    partial void OnGroupIdChanged();
    partial void OnProfessorIdChanging(long value);
    partial void OnProfessorIdChanged();
    partial void OnDayChanging(string value);
    partial void OnDayChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    partial void OnBuildingChanging(short value);
    partial void OnBuildingChanged();
    partial void OnRoomChanging(short value);
    partial void OnRoomChanged();
    #endregion
		
		public PracticeAndLabTimetable()
		{
			this._Group = default(EntityRef<Group>);
			this._Professor = default(EntityRef<Professor>);
			this._SpecialityDiscipline = default(EntityRef<SpecialityDiscipline>);
			this._Specialization = default(EntityRef<Specialization>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SpecializationId", DbType="BigInt NOT NULL")]
		public long SpecializationId
		{
			get
			{
				return this._SpecializationId;
			}
			set
			{
				if ((this._SpecializationId != value))
				{
					if (this._Specialization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecializationIdChanging(value);
					this.SendPropertyChanging();
					this._SpecializationId = value;
					this.SendPropertyChanged("SpecializationId");
					this.OnSpecializationIdChanged();
				}
			}
		}
		
		[Column(Storage="_SpecialityDisciplineId", DbType="BigInt NOT NULL")]
		public long SpecialityDisciplineId
		{
			get
			{
				return this._SpecialityDisciplineId;
			}
			set
			{
				if ((this._SpecialityDisciplineId != value))
				{
					if (this._SpecialityDiscipline.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialityDisciplineIdChanging(value);
					this.SendPropertyChanging();
					this._SpecialityDisciplineId = value;
					this.SendPropertyChanged("SpecialityDisciplineId");
					this.OnSpecialityDisciplineIdChanged();
				}
			}
		}
		
		[Column(Storage="_GroupId", DbType="BigInt NOT NULL")]
		public long GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProfessorId", DbType="BigInt NOT NULL")]
		public long ProfessorId
		{
			get
			{
				return this._ProfessorId;
			}
			set
			{
				if ((this._ProfessorId != value))
				{
					if (this._Professor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfessorIdChanging(value);
					this.SendPropertyChanging();
					this._ProfessorId = value;
					this.SendPropertyChanged("ProfessorId");
					this.OnProfessorIdChanged();
				}
			}
		}
		
		[Column(Storage="_Day", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Day
		{
			get
			{
				return this._Day;
			}
			set
			{
				if ((this._Day != value))
				{
					this.OnDayChanging(value);
					this.SendPropertyChanging();
					this._Day = value;
					this.SendPropertyChanged("Day");
					this.OnDayChanged();
				}
			}
		}
		
		[Column(Storage="_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Building", DbType="SmallInt NOT NULL")]
		public short Building
		{
			get
			{
				return this._Building;
			}
			set
			{
				if ((this._Building != value))
				{
					this.OnBuildingChanging(value);
					this.SendPropertyChanging();
					this._Building = value;
					this.SendPropertyChanged("Building");
					this.OnBuildingChanged();
				}
			}
		}
		
		[Column(Storage="_Room", DbType="SmallInt NOT NULL")]
		public short Room
		{
			get
			{
				return this._Room;
			}
			set
			{
				if ((this._Room != value))
				{
					this.OnRoomChanging(value);
					this.SendPropertyChanging();
					this._Room = value;
					this.SendPropertyChanged("Room");
					this.OnRoomChanged();
				}
			}
		}
		
		[Association(Name="Group_PracticeAndLabTimetable", Storage="_Group", ThisKey="GroupId", OtherKey="Id", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.PracticeAndLabTimetables.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.PracticeAndLabTimetables.Add(this);
						this._GroupId = value.Id;
					}
					else
					{
						this._GroupId = default(long);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[Association(Name="Professor_PracticeAndLabTimetable", Storage="_Professor", ThisKey="ProfessorId", OtherKey="UserId", IsForeignKey=true)]
		public Professor Professor
		{
			get
			{
				return this._Professor.Entity;
			}
			set
			{
				Professor previousValue = this._Professor.Entity;
				if (((previousValue != value) 
							|| (this._Professor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Professor.Entity = null;
						previousValue.PracticeAndLabTimetables.Remove(this);
					}
					this._Professor.Entity = value;
					if ((value != null))
					{
						value.PracticeAndLabTimetables.Add(this);
						this._ProfessorId = value.UserId;
					}
					else
					{
						this._ProfessorId = default(long);
					}
					this.SendPropertyChanged("Professor");
				}
			}
		}
		
		[Association(Name="SpecialityDiscipline_PracticeAndLabTimetable", Storage="_SpecialityDiscipline", ThisKey="SpecialityDisciplineId", OtherKey="Id", IsForeignKey=true)]
		public SpecialityDiscipline SpecialityDiscipline
		{
			get
			{
				return this._SpecialityDiscipline.Entity;
			}
			set
			{
				SpecialityDiscipline previousValue = this._SpecialityDiscipline.Entity;
				if (((previousValue != value) 
							|| (this._SpecialityDiscipline.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SpecialityDiscipline.Entity = null;
						previousValue.PracticeAndLabTimetables.Remove(this);
					}
					this._SpecialityDiscipline.Entity = value;
					if ((value != null))
					{
						value.PracticeAndLabTimetables.Add(this);
						this._SpecialityDisciplineId = value.Id;
					}
					else
					{
						this._SpecialityDisciplineId = default(long);
					}
					this.SendPropertyChanged("SpecialityDiscipline");
				}
			}
		}
		
		[Association(Name="Specialization_PracticeAndLabTimetable", Storage="_Specialization", ThisKey="SpecializationId", OtherKey="Id", IsForeignKey=true)]
		public Specialization Specialization
		{
			get
			{
				return this._Specialization.Entity;
			}
			set
			{
				Specialization previousValue = this._Specialization.Entity;
				if (((previousValue != value) 
							|| (this._Specialization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Specialization.Entity = null;
						previousValue.PracticeAndLabTimetables.Remove(this);
					}
					this._Specialization.Entity = value;
					if ((value != null))
					{
						value.PracticeAndLabTimetables.Add(this);
						this._SpecializationId = value.Id;
					}
					else
					{
						this._SpecializationId = default(long);
					}
					this.SendPropertyChanged("Specialization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PracticePlans")]
	public partial class PracticePlan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _SpecialityDisciplineId;
		
		private long _GroupId;
		
		private string _Topic;
		
		private System.DateTime _Date;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<SpecialityDiscipline> _SpecialityDiscipline;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnSpecialityDisciplineIdChanging(long value);
    partial void OnSpecialityDisciplineIdChanged();
    partial void OnGroupIdChanging(long value);
    partial void OnGroupIdChanged();
    partial void OnTopicChanging(string value);
    partial void OnTopicChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public PracticePlan()
		{
			this._Group = default(EntityRef<Group>);
			this._SpecialityDiscipline = default(EntityRef<SpecialityDiscipline>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SpecialityDisciplineId", DbType="BigInt NOT NULL")]
		public long SpecialityDisciplineId
		{
			get
			{
				return this._SpecialityDisciplineId;
			}
			set
			{
				if ((this._SpecialityDisciplineId != value))
				{
					if (this._SpecialityDiscipline.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialityDisciplineIdChanging(value);
					this.SendPropertyChanging();
					this._SpecialityDisciplineId = value;
					this.SendPropertyChanged("SpecialityDisciplineId");
					this.OnSpecialityDisciplineIdChanged();
				}
			}
		}
		
		[Column(Storage="_GroupId", DbType="BigInt NOT NULL")]
		public long GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[Column(Storage="_Topic", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Topic
		{
			get
			{
				return this._Topic;
			}
			set
			{
				if ((this._Topic != value))
				{
					this.OnTopicChanging(value);
					this.SendPropertyChanging();
					this._Topic = value;
					this.SendPropertyChanged("Topic");
					this.OnTopicChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Association(Name="Group_PracticePlan", Storage="_Group", ThisKey="GroupId", OtherKey="Id", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.PracticePlans.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.PracticePlans.Add(this);
						this._GroupId = value.Id;
					}
					else
					{
						this._GroupId = default(long);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[Association(Name="SpecialityDiscipline_PracticePlan", Storage="_SpecialityDiscipline", ThisKey="SpecialityDisciplineId", OtherKey="Id", IsForeignKey=true)]
		public SpecialityDiscipline SpecialityDiscipline
		{
			get
			{
				return this._SpecialityDiscipline.Entity;
			}
			set
			{
				SpecialityDiscipline previousValue = this._SpecialityDiscipline.Entity;
				if (((previousValue != value) 
							|| (this._SpecialityDiscipline.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SpecialityDiscipline.Entity = null;
						previousValue.PracticePlans.Remove(this);
					}
					this._SpecialityDiscipline.Entity = value;
					if ((value != null))
					{
						value.PracticePlans.Add(this);
						this._SpecialityDisciplineId = value.Id;
					}
					else
					{
						this._SpecialityDisciplineId = default(long);
					}
					this.SendPropertyChanged("SpecialityDiscipline");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Professors")]
	public partial class Professor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _UserId;
		
		private long _ChairId;
		
		private string _Degree;
		
		private string _Position;
		
		private string _About;
		
		private EntitySet<LectureTimetable> _LectureTimetables;
		
		private EntitySet<PracticeAndLabTimetable> _PracticeAndLabTimetables;
		
		private EntitySet<SpecialityDiscipline> _SpecialityDisciplines;
		
		private EntityRef<Chair> _Chair;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(long value);
    partial void OnUserIdChanged();
    partial void OnChairIdChanging(long value);
    partial void OnChairIdChanged();
    partial void OnDegreeChanging(string value);
    partial void OnDegreeChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnAboutChanging(string value);
    partial void OnAboutChanged();
    #endregion
		
		public Professor()
		{
			this._LectureTimetables = new EntitySet<LectureTimetable>(new Action<LectureTimetable>(this.attach_LectureTimetables), new Action<LectureTimetable>(this.detach_LectureTimetables));
			this._PracticeAndLabTimetables = new EntitySet<PracticeAndLabTimetable>(new Action<PracticeAndLabTimetable>(this.attach_PracticeAndLabTimetables), new Action<PracticeAndLabTimetable>(this.detach_PracticeAndLabTimetables));
			this._SpecialityDisciplines = new EntitySet<SpecialityDiscipline>(new Action<SpecialityDiscipline>(this.attach_SpecialityDisciplines), new Action<SpecialityDiscipline>(this.detach_SpecialityDisciplines));
			this._Chair = default(EntityRef<Chair>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_UserId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChairId", DbType="BigInt NOT NULL")]
		public long ChairId
		{
			get
			{
				return this._ChairId;
			}
			set
			{
				if ((this._ChairId != value))
				{
					if (this._Chair.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChairIdChanging(value);
					this.SendPropertyChanging();
					this._ChairId = value;
					this.SendPropertyChanged("ChairId");
					this.OnChairIdChanged();
				}
			}
		}
		
		[Column(Storage="_Degree", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Degree
		{
			get
			{
				return this._Degree;
			}
			set
			{
				if ((this._Degree != value))
				{
					this.OnDegreeChanging(value);
					this.SendPropertyChanging();
					this._Degree = value;
					this.SendPropertyChanged("Degree");
					this.OnDegreeChanged();
				}
			}
		}
		
		[Column(Storage="_Position", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[Column(Storage="_About", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string About
		{
			get
			{
				return this._About;
			}
			set
			{
				if ((this._About != value))
				{
					this.OnAboutChanging(value);
					this.SendPropertyChanging();
					this._About = value;
					this.SendPropertyChanged("About");
					this.OnAboutChanged();
				}
			}
		}
		
		[Association(Name="Professor_LectureTimetable", Storage="_LectureTimetables", ThisKey="UserId", OtherKey="ProfessorId")]
		public EntitySet<LectureTimetable> LectureTimetables
		{
			get
			{
				return this._LectureTimetables;
			}
			set
			{
				this._LectureTimetables.Assign(value);
			}
		}
		
		[Association(Name="Professor_PracticeAndLabTimetable", Storage="_PracticeAndLabTimetables", ThisKey="UserId", OtherKey="ProfessorId")]
		public EntitySet<PracticeAndLabTimetable> PracticeAndLabTimetables
		{
			get
			{
				return this._PracticeAndLabTimetables;
			}
			set
			{
				this._PracticeAndLabTimetables.Assign(value);
			}
		}
		
		[Association(Name="Professor_SpecialityDiscipline", Storage="_SpecialityDisciplines", ThisKey="UserId", OtherKey="ProfessorId")]
		public EntitySet<SpecialityDiscipline> SpecialityDisciplines
		{
			get
			{
				return this._SpecialityDisciplines;
			}
			set
			{
				this._SpecialityDisciplines.Assign(value);
			}
		}
		
		[Association(Name="Chair_Professor", Storage="_Chair", ThisKey="ChairId", OtherKey="Id", IsForeignKey=true)]
		public Chair Chair
		{
			get
			{
				return this._Chair.Entity;
			}
			set
			{
				Chair previousValue = this._Chair.Entity;
				if (((previousValue != value) 
							|| (this._Chair.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Chair.Entity = null;
						previousValue.Professors.Remove(this);
					}
					this._Chair.Entity = value;
					if ((value != null))
					{
						value.Professors.Add(this);
						this._ChairId = value.Id;
					}
					else
					{
						this._ChairId = default(long);
					}
					this.SendPropertyChanged("Chair");
				}
			}
		}
		
		[Association(Name="User_Professor", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Professor = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Professor = this;
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LectureTimetables(LectureTimetable entity)
		{
			this.SendPropertyChanging();
			entity.Professor = this;
		}
		
		private void detach_LectureTimetables(LectureTimetable entity)
		{
			this.SendPropertyChanging();
			entity.Professor = null;
		}
		
		private void attach_PracticeAndLabTimetables(PracticeAndLabTimetable entity)
		{
			this.SendPropertyChanging();
			entity.Professor = this;
		}
		
		private void detach_PracticeAndLabTimetables(PracticeAndLabTimetable entity)
		{
			this.SendPropertyChanging();
			entity.Professor = null;
		}
		
		private void attach_SpecialityDisciplines(SpecialityDiscipline entity)
		{
			this.SendPropertyChanging();
			entity.Professor = this;
		}
		
		private void detach_SpecialityDisciplines(SpecialityDiscipline entity)
		{
			this.SendPropertyChanging();
			entity.Professor = null;
		}
	}
	
	[Table(Name="dbo.Questions")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _RazdelId;
		
		private int _Type;
		
		private string _Text;
		
		private long _AssignedCount;
		
		private long _RightAnswersCount;
		
		private long _WrongAnswersCount;
		
		private int _DoubleGroup;
		
		private int _ExclusionGroup;
		
		private byte _IsDeleted;
		
		private byte _CanCommented;
		
		private EntitySet<Answer> _Answers;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<GeneratedQuestion> _GeneratedQuestions;
		
		private EntityRef<Razdel> _Razdel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnRazdelIdChanging(long value);
    partial void OnRazdelIdChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnAssignedCountChanging(long value);
    partial void OnAssignedCountChanged();
    partial void OnRightAnswersCountChanging(long value);
    partial void OnRightAnswersCountChanged();
    partial void OnWrongAnswersCountChanging(long value);
    partial void OnWrongAnswersCountChanged();
    partial void OnDoubleGroupChanging(int value);
    partial void OnDoubleGroupChanged();
    partial void OnExclusionGroupChanging(int value);
    partial void OnExclusionGroupChanged();
    partial void OnIsDeletedChanging(byte value);
    partial void OnIsDeletedChanged();
    partial void OnCanCommentedChanging(byte value);
    partial void OnCanCommentedChanged();
    #endregion
		
		public Question()
		{
			this._Answers = new EntitySet<Answer>(new Action<Answer>(this.attach_Answers), new Action<Answer>(this.detach_Answers));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._GeneratedQuestions = new EntitySet<GeneratedQuestion>(new Action<GeneratedQuestion>(this.attach_GeneratedQuestions), new Action<GeneratedQuestion>(this.detach_GeneratedQuestions));
			this._Razdel = default(EntityRef<Razdel>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_RazdelId", DbType="BigInt NOT NULL")]
		public long RazdelId
		{
			get
			{
				return this._RazdelId;
			}
			set
			{
				if ((this._RazdelId != value))
				{
					if (this._Razdel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRazdelIdChanging(value);
					this.SendPropertyChanging();
					this._RazdelId = value;
					this.SendPropertyChanged("RazdelId");
					this.OnRazdelIdChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Storage="_AssignedCount", DbType="BigInt NOT NULL")]
		public long AssignedCount
		{
			get
			{
				return this._AssignedCount;
			}
			set
			{
				if ((this._AssignedCount != value))
				{
					this.OnAssignedCountChanging(value);
					this.SendPropertyChanging();
					this._AssignedCount = value;
					this.SendPropertyChanged("AssignedCount");
					this.OnAssignedCountChanged();
				}
			}
		}
		
		[Column(Storage="_RightAnswersCount", DbType="BigInt NOT NULL")]
		public long RightAnswersCount
		{
			get
			{
				return this._RightAnswersCount;
			}
			set
			{
				if ((this._RightAnswersCount != value))
				{
					this.OnRightAnswersCountChanging(value);
					this.SendPropertyChanging();
					this._RightAnswersCount = value;
					this.SendPropertyChanged("RightAnswersCount");
					this.OnRightAnswersCountChanged();
				}
			}
		}
		
		[Column(Storage="_WrongAnswersCount", DbType="BigInt NOT NULL")]
		public long WrongAnswersCount
		{
			get
			{
				return this._WrongAnswersCount;
			}
			set
			{
				if ((this._WrongAnswersCount != value))
				{
					this.OnWrongAnswersCountChanging(value);
					this.SendPropertyChanging();
					this._WrongAnswersCount = value;
					this.SendPropertyChanged("WrongAnswersCount");
					this.OnWrongAnswersCountChanged();
				}
			}
		}
		
		[Column(Storage="_DoubleGroup", DbType="Int NOT NULL")]
		public int DoubleGroup
		{
			get
			{
				return this._DoubleGroup;
			}
			set
			{
				if ((this._DoubleGroup != value))
				{
					this.OnDoubleGroupChanging(value);
					this.SendPropertyChanging();
					this._DoubleGroup = value;
					this.SendPropertyChanged("DoubleGroup");
					this.OnDoubleGroupChanged();
				}
			}
		}
		
		[Column(Storage="_ExclusionGroup", DbType="Int NOT NULL")]
		public int ExclusionGroup
		{
			get
			{
				return this._ExclusionGroup;
			}
			set
			{
				if ((this._ExclusionGroup != value))
				{
					this.OnExclusionGroupChanging(value);
					this.SendPropertyChanging();
					this._ExclusionGroup = value;
					this.SendPropertyChanged("ExclusionGroup");
					this.OnExclusionGroupChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="TinyInt NOT NULL")]
		public byte IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_CanCommented", DbType="TinyInt NOT NULL")]
		public byte CanCommented
		{
			get
			{
				return this._CanCommented;
			}
			set
			{
				if ((this._CanCommented != value))
				{
					this.OnCanCommentedChanging(value);
					this.SendPropertyChanging();
					this._CanCommented = value;
					this.SendPropertyChanged("CanCommented");
					this.OnCanCommentedChanged();
				}
			}
		}
		
		[Association(Name="Question_Answer", Storage="_Answers", ThisKey="Id", OtherKey="QuestionId")]
		public EntitySet<Answer> Answers
		{
			get
			{
				return this._Answers;
			}
			set
			{
				this._Answers.Assign(value);
			}
		}
		
		[Association(Name="Question_Comment", Storage="_Comments", ThisKey="Id", OtherKey="QuestionId")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[Association(Name="Question_GeneratedQuestion", Storage="_GeneratedQuestions", ThisKey="Id", OtherKey="QuestionId")]
		public EntitySet<GeneratedQuestion> GeneratedQuestions
		{
			get
			{
				return this._GeneratedQuestions;
			}
			set
			{
				this._GeneratedQuestions.Assign(value);
			}
		}
		
		[Association(Name="Razdel_Question", Storage="_Razdel", ThisKey="RazdelId", OtherKey="Id", IsForeignKey=true)]
		public Razdel Razdel
		{
			get
			{
				return this._Razdel.Entity;
			}
			set
			{
				Razdel previousValue = this._Razdel.Entity;
				if (((previousValue != value) 
							|| (this._Razdel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Razdel.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._Razdel.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._RazdelId = value.Id;
					}
					else
					{
						this._RazdelId = default(long);
					}
					this.SendPropertyChanged("Razdel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
		
		private void attach_GeneratedQuestions(GeneratedQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_GeneratedQuestions(GeneratedQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
	
	[Table(Name="dbo.Razdels")]
	public partial class Razdel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _TopicId;
		
		private string _Title;
		
		private int _QuestionsCount;
		
		private EntitySet<Question> _Questions;
		
		private EntityRef<Topic> _Topic;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnTopicIdChanging(long value);
    partial void OnTopicIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnQuestionsCountChanging(int value);
    partial void OnQuestionsCountChanged();
    #endregion
		
		public Razdel()
		{
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			this._Topic = default(EntityRef<Topic>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_TopicId", DbType="BigInt NOT NULL")]
		public long TopicId
		{
			get
			{
				return this._TopicId;
			}
			set
			{
				if ((this._TopicId != value))
				{
					if (this._Topic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTopicIdChanging(value);
					this.SendPropertyChanging();
					this._TopicId = value;
					this.SendPropertyChanged("TopicId");
					this.OnTopicIdChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_QuestionsCount", DbType="Int NOT NULL")]
		public int QuestionsCount
		{
			get
			{
				return this._QuestionsCount;
			}
			set
			{
				if ((this._QuestionsCount != value))
				{
					this.OnQuestionsCountChanging(value);
					this.SendPropertyChanging();
					this._QuestionsCount = value;
					this.SendPropertyChanged("QuestionsCount");
					this.OnQuestionsCountChanged();
				}
			}
		}
		
		[Association(Name="Razdel_Question", Storage="_Questions", ThisKey="Id", OtherKey="RazdelId")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		[Association(Name="Topic_Razdel", Storage="_Topic", ThisKey="TopicId", OtherKey="Id", IsForeignKey=true)]
		public Topic Topic
		{
			get
			{
				return this._Topic.Entity;
			}
			set
			{
				Topic previousValue = this._Topic.Entity;
				if (((previousValue != value) 
							|| (this._Topic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Topic.Entity = null;
						previousValue.Razdels.Remove(this);
					}
					this._Topic.Entity = value;
					if ((value != null))
					{
						value.Razdels.Add(this);
						this._TopicId = value.Id;
					}
					else
					{
						this._TopicId = default(long);
					}
					this.SendPropertyChanged("Topic");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Razdel = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Razdel = null;
		}
	}
	
	[Table(Name="dbo.Specialities")]
	public partial class Speciality : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _DepartmentId;
		
		private string _Title;
		
		private string _Alias;
		
		private string _Abbreviation;
		
		private EntitySet<SpecialityDiscipline> _SpecialityDisciplines;
		
		private EntitySet<Specialization> _Specializations;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnDepartmentIdChanging(long value);
    partial void OnDepartmentIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnAliasChanging(string value);
    partial void OnAliasChanged();
    partial void OnAbbreviationChanging(string value);
    partial void OnAbbreviationChanged();
    #endregion
		
		public Speciality()
		{
			this._SpecialityDisciplines = new EntitySet<SpecialityDiscipline>(new Action<SpecialityDiscipline>(this.attach_SpecialityDisciplines), new Action<SpecialityDiscipline>(this.detach_SpecialityDisciplines));
			this._Specializations = new EntitySet<Specialization>(new Action<Specialization>(this.attach_Specializations), new Action<Specialization>(this.detach_Specializations));
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentId", DbType="BigInt NOT NULL")]
		public long DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Alias", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Alias
		{
			get
			{
				return this._Alias;
			}
			set
			{
				if ((this._Alias != value))
				{
					this.OnAliasChanging(value);
					this.SendPropertyChanging();
					this._Alias = value;
					this.SendPropertyChanged("Alias");
					this.OnAliasChanged();
				}
			}
		}
		
		[Column(Storage="_Abbreviation", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Abbreviation
		{
			get
			{
				return this._Abbreviation;
			}
			set
			{
				if ((this._Abbreviation != value))
				{
					this.OnAbbreviationChanging(value);
					this.SendPropertyChanging();
					this._Abbreviation = value;
					this.SendPropertyChanged("Abbreviation");
					this.OnAbbreviationChanged();
				}
			}
		}
		
		[Association(Name="Speciality_SpecialityDiscipline", Storage="_SpecialityDisciplines", ThisKey="Id", OtherKey="SpecialityId")]
		public EntitySet<SpecialityDiscipline> SpecialityDisciplines
		{
			get
			{
				return this._SpecialityDisciplines;
			}
			set
			{
				this._SpecialityDisciplines.Assign(value);
			}
		}
		
		[Association(Name="Speciality_Specialization", Storage="_Specializations", ThisKey="Id", OtherKey="SpecialityId")]
		public EntitySet<Specialization> Specializations
		{
			get
			{
				return this._Specializations;
			}
			set
			{
				this._Specializations.Assign(value);
			}
		}
		
		[Association(Name="Department_Speciality", Storage="_Department", ThisKey="DepartmentId", OtherKey="Id", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Specialities.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Specialities.Add(this);
						this._DepartmentId = value.Id;
					}
					else
					{
						this._DepartmentId = default(long);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SpecialityDisciplines(SpecialityDiscipline entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = this;
		}
		
		private void detach_SpecialityDisciplines(SpecialityDiscipline entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = null;
		}
		
		private void attach_Specializations(Specialization entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = this;
		}
		
		private void detach_Specializations(Specialization entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = null;
		}
	}
	
	[Table(Name="dbo.SpecialityDisciplines")]
	public partial class SpecialityDiscipline : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _SpecialityId;
		
		private long _EducationPlanId;
		
		private long _ChairId;
		
		private long _ProfessorId;
		
		private string _Alias;
		
		private string _Title;
		
		private string _Category;
		
		private short _LectureVolume;
		
		private short _PracticeVolume;
		
		private short _LabVolume;
		
		private string _Reporting;
		
		private string _Term;
		
		private EntitySet<LecturePlan> _LecturePlans;
		
		private EntitySet<LectureTimetable> _LectureTimetables;
		
		private EntitySet<PracticeAndLabTimetable> _PracticeAndLabTimetables;
		
		private EntitySet<PracticePlan> _PracticePlans;
		
		private EntityRef<Chair> _Chair;
		
		private EntityRef<Speciality> _Speciality;
		
		private EntityRef<EducationPlan> _EducationPlan;
		
		private EntityRef<Professor> _Professor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnSpecialityIdChanging(long value);
    partial void OnSpecialityIdChanged();
    partial void OnEducationPlanIdChanging(long value);
    partial void OnEducationPlanIdChanged();
    partial void OnChairIdChanging(long value);
    partial void OnChairIdChanged();
    partial void OnProfessorIdChanging(long value);
    partial void OnProfessorIdChanged();
    partial void OnAliasChanging(string value);
    partial void OnAliasChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnLectureVolumeChanging(short value);
    partial void OnLectureVolumeChanged();
    partial void OnPracticeVolumeChanging(short value);
    partial void OnPracticeVolumeChanged();
    partial void OnLabVolumeChanging(short value);
    partial void OnLabVolumeChanged();
    partial void OnReportingChanging(string value);
    partial void OnReportingChanged();
    partial void OnTermChanging(string value);
    partial void OnTermChanged();
    #endregion
		
		public SpecialityDiscipline()
		{
			this._LecturePlans = new EntitySet<LecturePlan>(new Action<LecturePlan>(this.attach_LecturePlans), new Action<LecturePlan>(this.detach_LecturePlans));
			this._LectureTimetables = new EntitySet<LectureTimetable>(new Action<LectureTimetable>(this.attach_LectureTimetables), new Action<LectureTimetable>(this.detach_LectureTimetables));
			this._PracticeAndLabTimetables = new EntitySet<PracticeAndLabTimetable>(new Action<PracticeAndLabTimetable>(this.attach_PracticeAndLabTimetables), new Action<PracticeAndLabTimetable>(this.detach_PracticeAndLabTimetables));
			this._PracticePlans = new EntitySet<PracticePlan>(new Action<PracticePlan>(this.attach_PracticePlans), new Action<PracticePlan>(this.detach_PracticePlans));
			this._Chair = default(EntityRef<Chair>);
			this._Speciality = default(EntityRef<Speciality>);
			this._EducationPlan = default(EntityRef<EducationPlan>);
			this._Professor = default(EntityRef<Professor>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SpecialityId", DbType="BigInt NOT NULL")]
		public long SpecialityId
		{
			get
			{
				return this._SpecialityId;
			}
			set
			{
				if ((this._SpecialityId != value))
				{
					if (this._Speciality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialityIdChanging(value);
					this.SendPropertyChanging();
					this._SpecialityId = value;
					this.SendPropertyChanged("SpecialityId");
					this.OnSpecialityIdChanged();
				}
			}
		}
		
		[Column(Storage="_EducationPlanId", DbType="BigInt NOT NULL")]
		public long EducationPlanId
		{
			get
			{
				return this._EducationPlanId;
			}
			set
			{
				if ((this._EducationPlanId != value))
				{
					if (this._EducationPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEducationPlanIdChanging(value);
					this.SendPropertyChanging();
					this._EducationPlanId = value;
					this.SendPropertyChanged("EducationPlanId");
					this.OnEducationPlanIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChairId", DbType="BigInt NOT NULL")]
		public long ChairId
		{
			get
			{
				return this._ChairId;
			}
			set
			{
				if ((this._ChairId != value))
				{
					if (this._Chair.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChairIdChanging(value);
					this.SendPropertyChanging();
					this._ChairId = value;
					this.SendPropertyChanged("ChairId");
					this.OnChairIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProfessorId", DbType="BigInt NOT NULL")]
		public long ProfessorId
		{
			get
			{
				return this._ProfessorId;
			}
			set
			{
				if ((this._ProfessorId != value))
				{
					if (this._Professor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfessorIdChanging(value);
					this.SendPropertyChanging();
					this._ProfessorId = value;
					this.SendPropertyChanged("ProfessorId");
					this.OnProfessorIdChanged();
				}
			}
		}
		
		[Column(Storage="_Alias", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Alias
		{
			get
			{
				return this._Alias;
			}
			set
			{
				if ((this._Alias != value))
				{
					this.OnAliasChanging(value);
					this.SendPropertyChanging();
					this._Alias = value;
					this.SendPropertyChanged("Alias");
					this.OnAliasChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Category", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_LectureVolume", DbType="SmallInt NOT NULL")]
		public short LectureVolume
		{
			get
			{
				return this._LectureVolume;
			}
			set
			{
				if ((this._LectureVolume != value))
				{
					this.OnLectureVolumeChanging(value);
					this.SendPropertyChanging();
					this._LectureVolume = value;
					this.SendPropertyChanged("LectureVolume");
					this.OnLectureVolumeChanged();
				}
			}
		}
		
		[Column(Storage="_PracticeVolume", DbType="SmallInt NOT NULL")]
		public short PracticeVolume
		{
			get
			{
				return this._PracticeVolume;
			}
			set
			{
				if ((this._PracticeVolume != value))
				{
					this.OnPracticeVolumeChanging(value);
					this.SendPropertyChanging();
					this._PracticeVolume = value;
					this.SendPropertyChanged("PracticeVolume");
					this.OnPracticeVolumeChanged();
				}
			}
		}
		
		[Column(Storage="_LabVolume", DbType="SmallInt NOT NULL")]
		public short LabVolume
		{
			get
			{
				return this._LabVolume;
			}
			set
			{
				if ((this._LabVolume != value))
				{
					this.OnLabVolumeChanging(value);
					this.SendPropertyChanging();
					this._LabVolume = value;
					this.SendPropertyChanged("LabVolume");
					this.OnLabVolumeChanged();
				}
			}
		}
		
		[Column(Storage="_Reporting", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Reporting
		{
			get
			{
				return this._Reporting;
			}
			set
			{
				if ((this._Reporting != value))
				{
					this.OnReportingChanging(value);
					this.SendPropertyChanging();
					this._Reporting = value;
					this.SendPropertyChanged("Reporting");
					this.OnReportingChanged();
				}
			}
		}
		
		[Column(Storage="_Term", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Term
		{
			get
			{
				return this._Term;
			}
			set
			{
				if ((this._Term != value))
				{
					this.OnTermChanging(value);
					this.SendPropertyChanging();
					this._Term = value;
					this.SendPropertyChanged("Term");
					this.OnTermChanged();
				}
			}
		}
		
		[Association(Name="SpecialityDiscipline_LecturePlan", Storage="_LecturePlans", ThisKey="Id", OtherKey="SpecialityDisciplineId")]
		public EntitySet<LecturePlan> LecturePlans
		{
			get
			{
				return this._LecturePlans;
			}
			set
			{
				this._LecturePlans.Assign(value);
			}
		}
		
		[Association(Name="SpecialityDiscipline_LectureTimetable", Storage="_LectureTimetables", ThisKey="Id", OtherKey="SpecialityDisciplineId")]
		public EntitySet<LectureTimetable> LectureTimetables
		{
			get
			{
				return this._LectureTimetables;
			}
			set
			{
				this._LectureTimetables.Assign(value);
			}
		}
		
		[Association(Name="SpecialityDiscipline_PracticeAndLabTimetable", Storage="_PracticeAndLabTimetables", ThisKey="Id", OtherKey="SpecialityDisciplineId")]
		public EntitySet<PracticeAndLabTimetable> PracticeAndLabTimetables
		{
			get
			{
				return this._PracticeAndLabTimetables;
			}
			set
			{
				this._PracticeAndLabTimetables.Assign(value);
			}
		}
		
		[Association(Name="SpecialityDiscipline_PracticePlan", Storage="_PracticePlans", ThisKey="Id", OtherKey="SpecialityDisciplineId")]
		public EntitySet<PracticePlan> PracticePlans
		{
			get
			{
				return this._PracticePlans;
			}
			set
			{
				this._PracticePlans.Assign(value);
			}
		}
		
		[Association(Name="Chair_SpecialityDiscipline", Storage="_Chair", ThisKey="ChairId", OtherKey="Id", IsForeignKey=true)]
		public Chair Chair
		{
			get
			{
				return this._Chair.Entity;
			}
			set
			{
				Chair previousValue = this._Chair.Entity;
				if (((previousValue != value) 
							|| (this._Chair.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Chair.Entity = null;
						previousValue.SpecialityDisciplines.Remove(this);
					}
					this._Chair.Entity = value;
					if ((value != null))
					{
						value.SpecialityDisciplines.Add(this);
						this._ChairId = value.Id;
					}
					else
					{
						this._ChairId = default(long);
					}
					this.SendPropertyChanged("Chair");
				}
			}
		}
		
		[Association(Name="Speciality_SpecialityDiscipline", Storage="_Speciality", ThisKey="SpecialityId", OtherKey="Id", IsForeignKey=true)]
		public Speciality Speciality
		{
			get
			{
				return this._Speciality.Entity;
			}
			set
			{
				Speciality previousValue = this._Speciality.Entity;
				if (((previousValue != value) 
							|| (this._Speciality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Speciality.Entity = null;
						previousValue.SpecialityDisciplines.Remove(this);
					}
					this._Speciality.Entity = value;
					if ((value != null))
					{
						value.SpecialityDisciplines.Add(this);
						this._SpecialityId = value.Id;
					}
					else
					{
						this._SpecialityId = default(long);
					}
					this.SendPropertyChanged("Speciality");
				}
			}
		}
		
		[Association(Name="EducationPlan_SpecialityDiscipline", Storage="_EducationPlan", ThisKey="EducationPlanId", OtherKey="Id", IsForeignKey=true)]
		public EducationPlan EducationPlan
		{
			get
			{
				return this._EducationPlan.Entity;
			}
			set
			{
				EducationPlan previousValue = this._EducationPlan.Entity;
				if (((previousValue != value) 
							|| (this._EducationPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EducationPlan.Entity = null;
						previousValue.SpecialityDisciplines.Remove(this);
					}
					this._EducationPlan.Entity = value;
					if ((value != null))
					{
						value.SpecialityDisciplines.Add(this);
						this._EducationPlanId = value.Id;
					}
					else
					{
						this._EducationPlanId = default(long);
					}
					this.SendPropertyChanged("EducationPlan");
				}
			}
		}
		
		[Association(Name="Professor_SpecialityDiscipline", Storage="_Professor", ThisKey="ProfessorId", OtherKey="UserId", IsForeignKey=true)]
		public Professor Professor
		{
			get
			{
				return this._Professor.Entity;
			}
			set
			{
				Professor previousValue = this._Professor.Entity;
				if (((previousValue != value) 
							|| (this._Professor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Professor.Entity = null;
						previousValue.SpecialityDisciplines.Remove(this);
					}
					this._Professor.Entity = value;
					if ((value != null))
					{
						value.SpecialityDisciplines.Add(this);
						this._ProfessorId = value.UserId;
					}
					else
					{
						this._ProfessorId = default(long);
					}
					this.SendPropertyChanged("Professor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LecturePlans(LecturePlan entity)
		{
			this.SendPropertyChanging();
			entity.SpecialityDiscipline = this;
		}
		
		private void detach_LecturePlans(LecturePlan entity)
		{
			this.SendPropertyChanging();
			entity.SpecialityDiscipline = null;
		}
		
		private void attach_LectureTimetables(LectureTimetable entity)
		{
			this.SendPropertyChanging();
			entity.SpecialityDiscipline = this;
		}
		
		private void detach_LectureTimetables(LectureTimetable entity)
		{
			this.SendPropertyChanging();
			entity.SpecialityDiscipline = null;
		}
		
		private void attach_PracticeAndLabTimetables(PracticeAndLabTimetable entity)
		{
			this.SendPropertyChanging();
			entity.SpecialityDiscipline = this;
		}
		
		private void detach_PracticeAndLabTimetables(PracticeAndLabTimetable entity)
		{
			this.SendPropertyChanging();
			entity.SpecialityDiscipline = null;
		}
		
		private void attach_PracticePlans(PracticePlan entity)
		{
			this.SendPropertyChanging();
			entity.SpecialityDiscipline = this;
		}
		
		private void detach_PracticePlans(PracticePlan entity)
		{
			this.SendPropertyChanging();
			entity.SpecialityDiscipline = null;
		}
	}
	
	[Table(Name="dbo.Specializations")]
	public partial class Specialization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _SpecialityId;
		
		private long _ChairId;
		
		private long _EducationPlanId;
		
		private string _Alias;
		
		private string _Title;
		
		private EntitySet<PracticeAndLabTimetable> _PracticeAndLabTimetables;
		
		private EntityRef<Chair> _Chair;
		
		private EntityRef<EducationPlan> _EducationPlan;
		
		private EntityRef<Speciality> _Speciality;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnSpecialityIdChanging(long value);
    partial void OnSpecialityIdChanged();
    partial void OnChairIdChanging(long value);
    partial void OnChairIdChanged();
    partial void OnEducationPlanIdChanging(long value);
    partial void OnEducationPlanIdChanged();
    partial void OnAliasChanging(string value);
    partial void OnAliasChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Specialization()
		{
			this._PracticeAndLabTimetables = new EntitySet<PracticeAndLabTimetable>(new Action<PracticeAndLabTimetable>(this.attach_PracticeAndLabTimetables), new Action<PracticeAndLabTimetable>(this.detach_PracticeAndLabTimetables));
			this._Chair = default(EntityRef<Chair>);
			this._EducationPlan = default(EntityRef<EducationPlan>);
			this._Speciality = default(EntityRef<Speciality>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SpecialityId", DbType="BigInt NOT NULL")]
		public long SpecialityId
		{
			get
			{
				return this._SpecialityId;
			}
			set
			{
				if ((this._SpecialityId != value))
				{
					if (this._Speciality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialityIdChanging(value);
					this.SendPropertyChanging();
					this._SpecialityId = value;
					this.SendPropertyChanged("SpecialityId");
					this.OnSpecialityIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChairId", DbType="BigInt NOT NULL")]
		public long ChairId
		{
			get
			{
				return this._ChairId;
			}
			set
			{
				if ((this._ChairId != value))
				{
					if (this._Chair.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChairIdChanging(value);
					this.SendPropertyChanging();
					this._ChairId = value;
					this.SendPropertyChanged("ChairId");
					this.OnChairIdChanged();
				}
			}
		}
		
		[Column(Storage="_EducationPlanId", DbType="BigInt NOT NULL")]
		public long EducationPlanId
		{
			get
			{
				return this._EducationPlanId;
			}
			set
			{
				if ((this._EducationPlanId != value))
				{
					if (this._EducationPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEducationPlanIdChanging(value);
					this.SendPropertyChanging();
					this._EducationPlanId = value;
					this.SendPropertyChanged("EducationPlanId");
					this.OnEducationPlanIdChanged();
				}
			}
		}
		
		[Column(Storage="_Alias", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Alias
		{
			get
			{
				return this._Alias;
			}
			set
			{
				if ((this._Alias != value))
				{
					this.OnAliasChanging(value);
					this.SendPropertyChanging();
					this._Alias = value;
					this.SendPropertyChanged("Alias");
					this.OnAliasChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="Specialization_PracticeAndLabTimetable", Storage="_PracticeAndLabTimetables", ThisKey="Id", OtherKey="SpecializationId")]
		public EntitySet<PracticeAndLabTimetable> PracticeAndLabTimetables
		{
			get
			{
				return this._PracticeAndLabTimetables;
			}
			set
			{
				this._PracticeAndLabTimetables.Assign(value);
			}
		}
		
		[Association(Name="Chair_Specialization", Storage="_Chair", ThisKey="ChairId", OtherKey="Id", IsForeignKey=true)]
		public Chair Chair
		{
			get
			{
				return this._Chair.Entity;
			}
			set
			{
				Chair previousValue = this._Chair.Entity;
				if (((previousValue != value) 
							|| (this._Chair.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Chair.Entity = null;
						previousValue.Specializations.Remove(this);
					}
					this._Chair.Entity = value;
					if ((value != null))
					{
						value.Specializations.Add(this);
						this._ChairId = value.Id;
					}
					else
					{
						this._ChairId = default(long);
					}
					this.SendPropertyChanged("Chair");
				}
			}
		}
		
		[Association(Name="EducationPlan_Specialization", Storage="_EducationPlan", ThisKey="EducationPlanId", OtherKey="Id", IsForeignKey=true)]
		public EducationPlan EducationPlan
		{
			get
			{
				return this._EducationPlan.Entity;
			}
			set
			{
				EducationPlan previousValue = this._EducationPlan.Entity;
				if (((previousValue != value) 
							|| (this._EducationPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EducationPlan.Entity = null;
						previousValue.Specializations.Remove(this);
					}
					this._EducationPlan.Entity = value;
					if ((value != null))
					{
						value.Specializations.Add(this);
						this._EducationPlanId = value.Id;
					}
					else
					{
						this._EducationPlanId = default(long);
					}
					this.SendPropertyChanged("EducationPlan");
				}
			}
		}
		
		[Association(Name="Speciality_Specialization", Storage="_Speciality", ThisKey="SpecialityId", OtherKey="Id", IsForeignKey=true)]
		public Speciality Speciality
		{
			get
			{
				return this._Speciality.Entity;
			}
			set
			{
				Speciality previousValue = this._Speciality.Entity;
				if (((previousValue != value) 
							|| (this._Speciality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Speciality.Entity = null;
						previousValue.Specializations.Remove(this);
					}
					this._Speciality.Entity = value;
					if ((value != null))
					{
						value.Specializations.Add(this);
						this._SpecialityId = value.Id;
					}
					else
					{
						this._SpecialityId = default(long);
					}
					this.SendPropertyChanged("Speciality");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PracticeAndLabTimetables(PracticeAndLabTimetable entity)
		{
			this.SendPropertyChanging();
			entity.Specialization = this;
		}
		
		private void detach_PracticeAndLabTimetables(PracticeAndLabTimetable entity)
		{
			this.SendPropertyChanging();
			entity.Specialization = null;
		}
	}
	
	[Table(Name="dbo.Students")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _UserId;
		
		private long _GroupId;
		
		private EntitySet<AssignedTestVariant> _AssignedTestVariants;
		
		private EntitySet<Comment> _Comments;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(long value);
    partial void OnUserIdChanged();
    partial void OnGroupIdChanging(long value);
    partial void OnGroupIdChanged();
    #endregion
		
		public Student()
		{
			this._AssignedTestVariants = new EntitySet<AssignedTestVariant>(new Action<AssignedTestVariant>(this.attach_AssignedTestVariants), new Action<AssignedTestVariant>(this.detach_AssignedTestVariants));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._Group = default(EntityRef<Group>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_GroupId", DbType="BigInt NOT NULL")]
		public long GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[Association(Name="Student_AssignedTestVariant", Storage="_AssignedTestVariants", ThisKey="UserId", OtherKey="StudentId")]
		public EntitySet<AssignedTestVariant> AssignedTestVariants
		{
			get
			{
				return this._AssignedTestVariants;
			}
			set
			{
				this._AssignedTestVariants.Assign(value);
			}
		}
		
		[Association(Name="Student_Comment", Storage="_Comments", ThisKey="UserId", OtherKey="StudentId")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[Association(Name="Group_Student", Storage="_Group", ThisKey="GroupId", OtherKey="Id", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._GroupId = value.Id;
					}
					else
					{
						this._GroupId = default(long);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[Association(Name="User_Student", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Student = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Student = this;
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AssignedTestVariants(AssignedTestVariant entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_AssignedTestVariants(AssignedTestVariant entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[Table(Name="dbo.Topics")]
	public partial class Topic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _DisciplineId;
		
		private string _Title;
		
		private EntitySet<GeneratedTest> _GeneratedTests;
		
		private EntitySet<Razdel> _Razdels;
		
		private EntityRef<Discipline> _Discipline;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnDisciplineIdChanging(long value);
    partial void OnDisciplineIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Topic()
		{
			this._GeneratedTests = new EntitySet<GeneratedTest>(new Action<GeneratedTest>(this.attach_GeneratedTests), new Action<GeneratedTest>(this.detach_GeneratedTests));
			this._Razdels = new EntitySet<Razdel>(new Action<Razdel>(this.attach_Razdels), new Action<Razdel>(this.detach_Razdels));
			this._Discipline = default(EntityRef<Discipline>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_DisciplineId", DbType="BigInt NOT NULL")]
		public long DisciplineId
		{
			get
			{
				return this._DisciplineId;
			}
			set
			{
				if ((this._DisciplineId != value))
				{
					if (this._Discipline.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDisciplineIdChanging(value);
					this.SendPropertyChanging();
					this._DisciplineId = value;
					this.SendPropertyChanged("DisciplineId");
					this.OnDisciplineIdChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="Topic_GeneratedTest", Storage="_GeneratedTests", ThisKey="Id", OtherKey="TopicId")]
		public EntitySet<GeneratedTest> GeneratedTests
		{
			get
			{
				return this._GeneratedTests;
			}
			set
			{
				this._GeneratedTests.Assign(value);
			}
		}
		
		[Association(Name="Topic_Razdel", Storage="_Razdels", ThisKey="Id", OtherKey="TopicId")]
		public EntitySet<Razdel> Razdels
		{
			get
			{
				return this._Razdels;
			}
			set
			{
				this._Razdels.Assign(value);
			}
		}
		
		[Association(Name="Discipline_Topic", Storage="_Discipline", ThisKey="DisciplineId", OtherKey="Id", IsForeignKey=true)]
		public Discipline Discipline
		{
			get
			{
				return this._Discipline.Entity;
			}
			set
			{
				Discipline previousValue = this._Discipline.Entity;
				if (((previousValue != value) 
							|| (this._Discipline.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Discipline.Entity = null;
						previousValue.Topics.Remove(this);
					}
					this._Discipline.Entity = value;
					if ((value != null))
					{
						value.Topics.Add(this);
						this._DisciplineId = value.Id;
					}
					else
					{
						this._DisciplineId = default(long);
					}
					this.SendPropertyChanged("Discipline");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GeneratedTests(GeneratedTest entity)
		{
			this.SendPropertyChanging();
			entity.Topic = this;
		}
		
		private void detach_GeneratedTests(GeneratedTest entity)
		{
			this.SendPropertyChanging();
			entity.Topic = null;
		}
		
		private void attach_Razdels(Razdel entity)
		{
			this.SendPropertyChanging();
			entity.Topic = this;
		}
		
		private void detach_Razdels(Razdel entity)
		{
			this.SendPropertyChanging();
			entity.Topic = null;
		}
	}
	
	[Table(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Login;
		
		private string _Password;
		
		private string _NickName;
		
		private string _Email;
		
		private string _SecondName;
		
		private string _FirstName;
		
		private string _Patronymic;
		
		private string _Role;
		
		private EntityRef<Professor> _Professor;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnNickNameChanging(string value);
    partial void OnNickNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnSecondNameChanging(string value);
    partial void OnSecondNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnPatronymicChanging(string value);
    partial void OnPatronymicChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    #endregion
		
		public User()
		{
			this._Professor = default(EntityRef<Professor>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Login", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_NickName", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string NickName
		{
			get
			{
				return this._NickName;
			}
			set
			{
				if ((this._NickName != value))
				{
					this.OnNickNameChanging(value);
					this.SendPropertyChanging();
					this._NickName = value;
					this.SendPropertyChanged("NickName");
					this.OnNickNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_SecondName", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string SecondName
		{
			get
			{
				return this._SecondName;
			}
			set
			{
				if ((this._SecondName != value))
				{
					this.OnSecondNameChanging(value);
					this.SendPropertyChanging();
					this._SecondName = value;
					this.SendPropertyChanged("SecondName");
					this.OnSecondNameChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_Patronymic", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Patronymic
		{
			get
			{
				return this._Patronymic;
			}
			set
			{
				if ((this._Patronymic != value))
				{
					this.OnPatronymicChanging(value);
					this.SendPropertyChanging();
					this._Patronymic = value;
					this.SendPropertyChanged("Patronymic");
					this.OnPatronymicChanged();
				}
			}
		}
		
		[Column(Storage="_Role", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[Association(Name="User_Professor", Storage="_Professor", ThisKey="Id", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public Professor Professor
		{
			get
			{
				return this._Professor.Entity;
			}
			set
			{
				Professor previousValue = this._Professor.Entity;
				if (((previousValue != value) 
							|| (this._Professor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Professor.Entity = null;
						previousValue.User = null;
					}
					this._Professor.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("Professor");
				}
			}
		}
		
		[Association(Name="User_Student", Storage="_Student", ThisKey="Id", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.User = null;
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
